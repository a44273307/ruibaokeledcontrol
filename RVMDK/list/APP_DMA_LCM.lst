C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE APP_DMA_LCM
OBJECT MODULE PLACED IN .\list\APP_DMA_LCM.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5 c251\C251\BIN\C251.EXE ..\App\src\APP_DMA_LCM.c XSMALL INTR2 BROWSE 
                    -INCDIR(..\Driver\inc;..\User;..\App\inc) DEBUG PRINT(.\list\APP_DMA_LCM.lst) OBJECT(.\list\APP_DMA_LCM.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCMCU.com --------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- QQ:  800003751 -------------------------------------------------*/
   10          /* Èç¹ûÒªÔÚ³ÌÐòÖÐÊ¹ÓÃ´Ë´úÂë,ÇëÔÚ³ÌÐòÖÐ×¢Ã÷Ê¹ÓÃÁËSTCµÄ×ÊÁÏ¼°³ÌÐò            */
   11          /*---------------------------------------------------------------------*/
   12          
   13          #include        "APP_DMA_LCM.h"
   14          #include        "STC32G_GPIO.h"
   15          #include        "STC32G_DMA.h"
   16          #include        "STC32G_NVIC.h"
   17          #include        "STC32G_LCM.h"
   18          #include        "STC32G_Delay.h"
   19          #include        "font.h"
   20          
   21          /*************  ¹¦ÄÜËµÃ÷        **************
   22          
   23          LCM½Ó¿Ú+DMAÇý¶¯Òº¾§ÆÁ³ÌÐò
   24          
   25          8bit I8080Ä£Ê½, P6¿Ú½ÓÊý¾Ý¿Ú
   26          
   27          sbit LCD_RS = P4^5;      //Êý¾Ý/ÃüÁîÇÐ»»
   28          sbit LCD_WR = P4^2;      //Ð´¿ØÖÆ
   29          sbit LCD_RD = P4^4;      //¶Á¿ØÖÆ
   30          sbit LCD_CS = P3^4;      //Æ¬Ñ¡
   31          sbit LCD_RESET = P4^3;   //¸´Î»
   32          
   33          LCMÖ¸ÁîÍ¨¹ýÖÐ¶Ï·½Ê½µÈ´ý·¢ËÍÍê³É
   34          
   35          DMAÉèÖÃ³¤¶È2048×Ö½Ú£¬Í¨¹ýÖÐ¶Ï·½Ê½ÅÐ¶Ï´«ÊäÍê³É
   36          
   37          ÏÂÔØÊ±, Ñ¡ÔñÊ±ÖÓ 24MHz (¿ÉÒÔÔÚÅäÖÃÎÄ¼þ"config.h"ÖÐÐÞ¸Ä).
   38          
   39          ******************************************/
   40          
   41          
   42          //========================================================================
   43          //                               ±¾µØ³£Á¿ÉùÃ÷   
   44          //========================================================================
   45          
   46          //Ö§³ÖºáÊúÆÁ¿ìËÙ¶¨ÒåÇÐ»»
   47          #define USE_HORIZONTAL            0   //¶¨ÒåÒº¾§ÆÁË³Ê±ÕëÐý×ª·½Ïò        0-0¶ÈÐý×ª£¬1-90¶ÈÐý×ª£¬2-180¶ÈÐý×ª£¬3-270¶ÈÐý×
             -ª
   48          
   49          //»­±ÊÑÕÉ«
   50          #define WHITE            0xFFFF
   51          #define BLACK            0x0000   
   52          #define BLUE             0x001F  
   53          #define BRED             0XF81F
   54          #define GRED             0XFFE0
   55          #define GBLUE            0X07FF
   56          #define RED              0xF800
   57          #define MAGENTA          0xF81F
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 2   

   58          #define GREEN            0x07E0
   59          #define CYAN             0x7FFF
   60          #define YELLOW           0xFFE0
   61          #define BROWN            0XBC40 //×ØÉ«
   62          #define BRRED            0XFC07 //×ØºìÉ«
   63          #define GRAY             0X8430 //»ÒÉ«
   64          
   65          #define DMA_AMT_LEN  2047  //n+1, ²»Òª³¬¹ýÐ¾Æ¬ xdata ¿Õ¼äÉÏÏÞ
   66          
   67          //========================================================================
   68          //                               ±¾µØ±äÁ¿ÉùÃ÷
   69          //========================================================================
   70          
   71          //¶¨ÒåLCDµÄ³ß´ç
   72          #define LCD_W 240                       //LCD ¿í¶È
   73          #define LCD_H 320                       //LCD ¸ß¶È
   74          
   75          u16 POINT_COLOR=0x0000; //»­±ÊÑÕÉ«
   76          
   77          u16 xdata Buffer[8]={0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
   78          u16 xdata Color[DMA_AMT_LEN+1];
   79          
   80          typedef struct  
   81          {                                                                                   
   82                  u16 width;                      //LCD ¿í¶È
   83                  u16 height;                     //LCD ¸ß¶È
   84                  u16 id;                         //LCD ID
   85                  u8  dir;                        //ºáÆÁ»¹ÊÇÊúÆÁ¿ØÖÆ£º0£¬ÊúÆÁ£»1£¬ºáÆÁ¡£  
   86                  u8 wramcmd;             //¿ªÊ¼Ð´gramÖ¸Áî
   87                  u8 rramcmd;   //¿ªÊ¼¶ÁgramÖ¸Áî
   88                  u8 setxcmd;             //ÉèÖÃx×ø±êÖ¸Áî
   89                  u8 setycmd;             //ÉèÖÃy×ø±êÖ¸Áî  
   90          }_lcd_dev;      
   91          
   92          _lcd_dev lcddev;
   93          
   94          //========================================================================
   95          //                               ±¾µØº¯ÊýÉùÃ÷
   96          //========================================================================
   97          
   98          void Test_Color(void);
   99          void LCD_WR_DATA_16Bit(u16 Data);
  100          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd);
  101          u16 LCD_Read_ID(void);
  102          void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode);
  103          void LCD_Init(void);
  104          
  105          //========================================================================
  106          //                            Íâ²¿º¯ÊýºÍ±äÁ¿ÉùÃ÷
  107          //========================================================================
  108          
  109          
  110          //========================================================================
  111          // º¯Êý: DMA_LCM_init
  112          // ÃèÊö: ÓÃ»§³õÊ¼»¯³ÌÐò.
  113          // ²ÎÊý: None.
  114          // ·µ»Ø: None.
  115          // °æ±¾: V1.0, 2020-09-28
  116          //========================================================================
  117          void DMA_LCM_init(void)
  118          {
  119   1              LCM_InitTypeDef         LCM_InitStructure;              //½á¹¹¶¨Òå
  120   1              DMA_LCM_InitTypeDef             DMA_LCM_InitStructure;          //½á¹¹¶¨Òå
  121   1      
  122   1              //----------------------------------------------
  123   1              P6_MODE_OUT_PP(GPIO_Pin_All);           //P6 ÉèÖÃ³ÉÍÆÍìÊä³ö
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 3   

  124   1              P3_MODE_OUT_PP(GPIO_Pin_4);                     //P3.4¿ÚÉèÖÃ³ÉÍÆÍìÊä³ö
  125   1              P4_MODE_OUT_PP(GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5);      //P4.2~P4.5 ÉèÖÃ³ÉÍÆÍìÊä³ö
  126   1              
  127   1              //----------------------------------------------
  128   1              LCM_InitStructure.LCM_Enable = ENABLE;                  //LCM½Ó¿ÚÊ¹ÄÜ   ENABLE,DISABLE
  129   1              LCM_InitStructure.LCM_Mode = MODE_I8080;                //LCM½Ó¿ÚÄ£Ê½   MODE_I8080,MODE_M6800
  130   1              LCM_InitStructure.LCM_Bit_Wide = BIT_WIDE_8;    //LCMÊý¾Ý¿í¶È   BIT_WIDE_8,BIT_WIDE_16
  131   1              LCM_InitStructure.LCM_Setup_Time = 2;                   //LCMÍ¨ÐÅÊý¾Ý½¨Á¢Ê±¼ä   0~7
  132   1              LCM_InitStructure.LCM_Hold_Time = 1;                    //LCMÍ¨ÐÅÊý¾Ý±£³ÖÊ±¼ä   0~3
  133   1              LCM_Inilize(&LCM_InitStructure);                //³õÊ¼»¯
  134   1              NVIC_LCM_Init(ENABLE,Priority_0);               //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0,Priority_1,Prio
             -rity_2,Priority_3
  135   1      
  136   1              //----------------------------------------------
  137   1              DMA_LCM_InitStructure.DMA_Enable = ENABLE;                      //DMAÊ¹ÄÜ       ENABLE,DISABLE
  138   1              DMA_LCM_InitStructure.DMA_Length = DMA_AMT_LEN;     //DMA´«Êä×Ü×Ö½ÚÊý   (0~65535) + 1, ²»Òª³¬¹ýÐ¾Æ¬ xdat
             -a ¿Õ¼äÉÏÏÞ
  139   1              DMA_LCM_InitStructure.DMA_Tx_Buffer = (u16)Color;       //·¢ËÍÊý¾Ý´æ´¢µØÖ·
  140   1              DMA_LCM_InitStructure.DMA_Rx_Buffer = (u16)Buffer;      //½ÓÊÕÊý¾Ý´æ´¢µØÖ·
  141   1              DMA_LCM_Inilize(&DMA_LCM_InitStructure);                //³õÊ¼»¯
  142   1              NVIC_DMA_LCM_Init(ENABLE,Priority_0,Priority_0);        //ÖÐ¶ÏÊ¹ÄÜ, ENABLE/DISABLE; ÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~P
             -riority_3; ×ÜÏßÓÅÏÈ¼¶(µÍµ½¸ß) Priority_0~Priority_3
  143   1      
  144   1              LCD_Init();
  145   1      }
  146          
  147          //========================================================================
  148          // º¯Êý: Sample_DMA_LCM
  149          // ÃèÊö: ÓÃ»§Ó¦ÓÃ³ÌÐò.
  150          // ²ÎÊý: None.
  151          // ·µ»Ø: None.
  152          // °æ±¾: V1.0, 2020-09-24
  153          //========================================================================
  154          void Sample_DMA_LCM(void)
  155          {
  156   1              Test_Color();
  157   1      }
  158          
  159          void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
  160          {       
  161   1              u16 i,j;                        
  162   1              u16 width=ex-sx+1;              //µÃµ½Ìî³äµÄ¿í¶È
  163   1              u16 height=ey-sy+1;             //¸ß¶È
  164   1              LCD_SetWindows(sx,sy,ex,ey);//ÉèÖÃÏÔÊ¾´°¿Ú
  165   1      
  166   1              for(j=0,i=0;i<=DMA_AMT_LEN;i++)
  167   1              {
  168   2                      Color[i] = color;
  169   2              }
  170   1              LCM_Cnt = 75;     //(320 * 240 * 2) / 2048 = 75
  171   1              LCD_CS=0;
  172   1              DMA_LCM_TRIG_WD();      //Write dat
  173   1              while(!LCD_CS);
  174   1      }
  175          
  176          void Test_Color(void)
  177          {
  178   1              LCD_Fill(0,0,lcddev.width,lcddev.height,WHITE);
  179   1              Show_Str(20,30,BLUE,YELLOW,"LCM Test",16,1);delay_ms(800);
  180   1              LCD_Fill(0,0,lcddev.width,lcddev.height,RED);
  181   1              Show_Str(20,30,BLUE,YELLOW,"RED ",16,1);delay_ms(800);
  182   1              LCD_Fill(0,0,lcddev.width,lcddev.height,GREEN);
  183   1              Show_Str(20,30,BLUE,YELLOW,"GREEN ",16,1);delay_ms(800);
  184   1              LCD_Fill(0,0,lcddev.width,lcddev.height,BLUE);
  185   1              Show_Str(20,30,RED,YELLOW,"BLUE ",16,1);delay_ms(800);
  186   1      }
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 4   

  187          
  188          /*****************************************************************************
  189           * @name       :void LCD_WR_REG(u8 Reg) 
  190           * @date       :2018-08-09 
  191           * @function   :Write an 16-bit command to the LCD screen
  192           * @parameters :data:Command value to be written
  193           * @retvalue   :None
  194          ******************************************************************************/
  195          void LCD_WR_REG(u8 Reg)  
  196          {
  197   1              LCMIFDATL = Reg;
  198   1              LCD_CS=0;
  199   1              LCMIFCR = 0x84;         //Enable interface, write command out
  200   1              while(LcmFlag);
  201   1              LCD_CS = 1 ;
  202   1      } 
  203          
  204          /*****************************************************************************
  205           * @name       :void LCD_WR_DATA(u8 Data)
  206           * @date       :2018-08-09 
  207           * @function   :Write an 16-bit data to the LCD screen
  208           * @parameters :data:data value to be written
  209           * @retvalue   :None
  210          ******************************************************************************/
  211          void LCD_WR_DATA(u8 Data)
  212          {
  213   1              LCMIFDATL = Data;
  214   1              LCD_CS=0;
  215   1              LCMIFCR = 0x85;         //Enable interface, write data out
  216   1              while(LcmFlag);
  217   1              LCD_CS = 1 ;
  218   1      }
  219          
  220          /*****************************************************************************
  221           * @name       :void LCD_WR_DATA_16Bit(u16 Data)
  222           * @date       :2018-08-09 
  223           * @function   :Write an 16-bit command to the LCD screen
  224           * @parameters :Data:Data to be written
  225           * @retvalue   :None
  226          ******************************************************************************/  
  227          void LCD_WR_DATA_16Bit(u16 Data)
  228          {
  229   1              LCD_WR_DATA((u8)(Data>>8));
  230   1              LCD_WR_DATA((u8)Data);
  231   1      }
  232          
  233          /*****************************************************************************
  234           * @name       :void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
  235           * @date       :2018-08-09 
  236           * @function   :Write data into registers
  237           * @parameters :LCD_Reg:Register address
  238                          LCD_RegValue:Data to be written
  239           * @retvalue   :None
  240          ******************************************************************************/
  241          void LCD_WriteReg(u8 LCD_Reg, u8 LCD_RegValue)
  242          {
  243   1          LCD_WR_REG(LCD_Reg);
  244   1          LCD_WR_DATA(LCD_RegValue);
  245   1      }
  246          
  247          /*****************************************************************************
  248           * @name       :void LCD_WriteRAM_Prepare(void)
  249           * @date       :2018-08-09 
  250           * @function   :Write GRAM
  251           * @parameters :None
  252           * @retvalue   :None
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 5   

  253          ******************************************************************************/ 
  254          void LCD_WriteRAM_Prepare(void)
  255          {
  256   1              LCD_WR_REG(lcddev.wramcmd);       
  257   1      }
  258          
  259          /*****************************************************************************
  260           * @name       :void LCD_DrawPoint(u16 x,u16 y)
  261           * @date       :2018-08-09 
  262           * @function   :Write a pixel data at a specified location
  263           * @parameters :x:the x coordinate of the pixel
  264                          y:the y coordinate of the pixel
  265           * @retvalue   :None
  266          ******************************************************************************/ 
  267          void LCD_DrawPoint(u16 x,u16 y)
  268          {
  269   1              LCD_SetWindows(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ 
  270   1              LCD_WR_DATA_16Bit(POINT_COLOR);             
  271   1      }        
  272          
  273          /*****************************************************************************
  274           * @name       :void LCDReset(void)
  275           * @date       :2018-08-09 
  276           * @function   :Reset LCD screen
  277           * @parameters :None
  278           * @retvalue   :None
  279          ******************************************************************************/ 
  280          void LCDReset(void)
  281          {
  282   1              LCD_CS=1;
  283   1              delay_ms(50);   
  284   1              LCD_RESET=0;
  285   1              delay_ms(150);
  286   1              LCD_RESET=1;
  287   1              delay_ms(50);
  288   1      }
  289          
  290          /*****************************************************************************
  291           * @name       :void LCD_direction(u8 direction)
  292           * @date       :2018-08-09 
  293           * @function   :Setting the display direction of LCD screen
  294           * @parameters :direction:0-0 degree
  295                                    1-90 degree
  296                                                                                                                  2-180 degree
  297                                                                                                                  3-270 degree
  298           * @retvalue   :None
  299          ******************************************************************************/ 
  300          void LCD_direction(u8 direction)
  301          { 
  302   1          lcddev.setxcmd=0x2A;
  303   1          lcddev.setycmd=0x2B;
  304   1          lcddev.wramcmd=0x2C;
  305   1          lcddev.rramcmd=0x2E;
  306   1              switch(direction){
  307   2                      case 0:
  308   2                              lcddev.width=LCD_W;
  309   2                              lcddev.height=LCD_H;
  310   2                              LCD_WriteReg(0x36,(1<<3));
  311   2                      break;
  312   2                      case 1:
  313   2                              lcddev.width=LCD_H;
  314   2                              lcddev.height=LCD_W;
  315   2                              LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5)|(1<<4));
  316   2                      break;
  317   2                      case 2:
  318   2                              lcddev.width=LCD_W;
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 6   

  319   2                              lcddev.height=LCD_H;    
  320   2                              LCD_WriteReg(0x36,(1<<3)|(1<<4)|(1<<6)|(1<<7));
  321   2                      break;
  322   2                      case 3:
  323   2                              lcddev.width=LCD_H;
  324   2                              lcddev.height=LCD_W;
  325   2                              LCD_WriteReg(0x36,(1<<3)|(1<<5)|(1<<6));
  326   2                      break;  
  327   2                      default:break;
  328   2              }
  329   1      }
  330          
  331          /*****************************************************************************
  332           * @name       :void LCD_Init(void)
  333           * @date       :2018-08-09 
  334           * @function   :Initialization LCD screen
  335           * @parameters :None
  336           * @retvalue   :None
  337          ******************************************************************************/          
  338          void LCD_Init(void)
  339          {
  340   1              LCDReset(); //³õÊ¼»¯Ö®Ç°¸´Î»
  341   1      //      delay_ms(150);                     //¸ù¾Ý²»Í¬¾§ÕñËÙ¶È¿ÉÒÔµ÷ÕûÑÓÊ±£¬±£ÕÏÎÈ¶¨ÏÔÊ¾
  342   1      //*************2.4inch ILI9341³õÊ¼»¯**********//        
  343   1              LCD_WR_REG(0xCF);  
  344   1              LCD_WR_DATA(0x00); 
  345   1              LCD_WR_DATA(0xD9); //0xC1 
  346   1              LCD_WR_DATA(0X30); 
  347   1              LCD_WR_REG(0xED);  
  348   1              LCD_WR_DATA(0x64); 
  349   1              LCD_WR_DATA(0x03); 
  350   1              LCD_WR_DATA(0X12); 
  351   1              LCD_WR_DATA(0X81); 
  352   1              LCD_WR_REG(0xE8);  
  353   1              LCD_WR_DATA(0x85); 
  354   1              LCD_WR_DATA(0x10); 
  355   1              LCD_WR_DATA(0x7A); 
  356   1              LCD_WR_REG(0xCB);  
  357   1              LCD_WR_DATA(0x39); 
  358   1              LCD_WR_DATA(0x2C); 
  359   1              LCD_WR_DATA(0x00); 
  360   1              LCD_WR_DATA(0x34); 
  361   1              LCD_WR_DATA(0x02); 
  362   1              LCD_WR_REG(0xF7);  
  363   1              LCD_WR_DATA(0x20); 
  364   1              LCD_WR_REG(0xEA);  
  365   1              LCD_WR_DATA(0x00); 
  366   1              LCD_WR_DATA(0x00); 
  367   1              LCD_WR_REG(0xC0);    //Power control 
  368   1              LCD_WR_DATA(0x1B);   //VRH[5:0] 
  369   1              LCD_WR_REG(0xC1);    //Power control 
  370   1              LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] 0x01
  371   1              LCD_WR_REG(0xC5);    //VCM control 
  372   1              LCD_WR_DATA(0x08);       //30
  373   1              LCD_WR_DATA(0x26);       //30
  374   1              LCD_WR_REG(0xC7);    //VCM control2 
  375   1              LCD_WR_DATA(0XB7); 
  376   1              LCD_WR_REG(0x36);    // Memory Access Control 
  377   1              LCD_WR_DATA(0x08);
  378   1              LCD_WR_REG(0x3A);   
  379   1              LCD_WR_DATA(0x55); 
  380   1              LCD_WR_REG(0xB1);   
  381   1              LCD_WR_DATA(0x00);   
  382   1              LCD_WR_DATA(0x1A); 
  383   1              LCD_WR_REG(0xB6);    // Display Function Control 
  384   1              LCD_WR_DATA(0x0A); 
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 7   

  385   1              LCD_WR_DATA(0xA2); 
  386   1              LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
  387   1              LCD_WR_DATA(0x00); 
  388   1              LCD_WR_REG(0x26);    //Gamma curve selected 
  389   1              LCD_WR_DATA(0x01); 
  390   1              LCD_WR_REG(0xE0);    //Set Gamma 
  391   1              LCD_WR_DATA(0x0F); 
  392   1              LCD_WR_DATA(0x1D); 
  393   1              LCD_WR_DATA(0x1A); 
  394   1              LCD_WR_DATA(0x0A); 
  395   1              LCD_WR_DATA(0x0D); 
  396   1              LCD_WR_DATA(0x07); 
  397   1              LCD_WR_DATA(0x49); 
  398   1              LCD_WR_DATA(0X66); 
  399   1              LCD_WR_DATA(0x3B); 
  400   1              LCD_WR_DATA(0x07); 
  401   1              LCD_WR_DATA(0x11); 
  402   1              LCD_WR_DATA(0x01); 
  403   1              LCD_WR_DATA(0x09); 
  404   1              LCD_WR_DATA(0x05); 
  405   1              LCD_WR_DATA(0x04);               
  406   1              LCD_WR_REG(0XE1);    //Set Gamma 
  407   1              LCD_WR_DATA(0x00); 
  408   1              LCD_WR_DATA(0x18); 
  409   1              LCD_WR_DATA(0x1D); 
  410   1              LCD_WR_DATA(0x02); 
  411   1              LCD_WR_DATA(0x0F); 
  412   1              LCD_WR_DATA(0x04); 
  413   1              LCD_WR_DATA(0x36); 
  414   1              LCD_WR_DATA(0x13); 
  415   1              LCD_WR_DATA(0x4C); 
  416   1              LCD_WR_DATA(0x07); 
  417   1              LCD_WR_DATA(0x13); 
  418   1              LCD_WR_DATA(0x0F); 
  419   1              LCD_WR_DATA(0x2E); 
  420   1              LCD_WR_DATA(0x2F); 
  421   1              LCD_WR_DATA(0x05); 
  422   1              LCD_WR_REG(0x2B); 
  423   1              LCD_WR_DATA(0x00);
  424   1              LCD_WR_DATA(0x00);
  425   1              LCD_WR_DATA(0x01);
  426   1              LCD_WR_DATA(0x3f);
  427   1              LCD_WR_REG(0x2A); 
  428   1              LCD_WR_DATA(0x00);
  429   1              LCD_WR_DATA(0x00);
  430   1              LCD_WR_DATA(0x00);
  431   1              LCD_WR_DATA(0xef);       
  432   1              LCD_WR_REG(0x11); //Exit Sleep
  433   1              delay_ms(120);
  434   1              LCD_WR_REG(0x29); //display on  
  435   1      
  436   1              //ÉèÖÃLCDÊôÐÔ²ÎÊý
  437   1              LCD_direction(USE_HORIZONTAL);//ÉèÖÃLCDÏÔÊ¾·½Ïò 
  438   1      }
  439          
  440          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
  441          {       
  442   1              LCD_WR_REG(lcddev.setxcmd);     
  443   1              LCD_WR_DATA((u8)(xStar>>8));
  444   1              LCD_WR_DATA(0x00FF&xStar);              
  445   1              LCD_WR_DATA((u8)(xEnd>>8));
  446   1              LCD_WR_DATA(0x00FF&xEnd);
  447   1      
  448   1              LCD_WR_REG(lcddev.setycmd);     
  449   1              LCD_WR_DATA((u8)(yStar>>8));
  450   1              LCD_WR_DATA(0x00FF&yStar);              
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 8   

  451   1              LCD_WR_DATA((u8)(yEnd>>8));
  452   1              LCD_WR_DATA(0x00FF&yEnd);       
  453   1      
  454   1              LCD_WriteRAM_Prepare(); //¿ªÊ¼Ð´ÈëGRAM                          
  455   1      }
  456          
  457          /*****************************************************************************
  458           * @name       :void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
  459           * @date       :2018-08-09 
  460           * @function   :Display a single English character
  461           * @parameters :x:the beginning x coordinate of the Character display position
  462                          y:the beginning y coordinate of the Character display position
  463                                                                          fc:the color value of display character
  464                                                                          bc:the background color of display character
  465                                                                          num:the ascii code of display character(0~94)
  466                                                                          size:the size of display character
  467                                                                          mode:0-no overlying,1-overlying
  468           * @retvalue   :None
  469          ******************************************************************************/ 
  470          void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
  471          {
  472   1              u8 temp;
  473   1              u8 pos,t;
  474   1              u16 colortemp=POINT_COLOR;
  475   1      
  476   1              num=num-' ';//µÃµ½Æ«ÒÆºóµÄÖµ
  477   1              LCD_SetWindows(x,y,x+size/2-1,y+size-1);//ÉèÖÃµ¥¸öÎÄ×ÖÏÔÊ¾´°¿Ú
  478   1              if(!mode) //·Çµþ¼Ó·½Ê½
  479   1              {
  480   2                      for(pos=0;pos<size;pos++)
  481   2                      {
  482   3                              if(size==12)temp=asc2_1206[num][pos];//µ÷ÓÃ1206×ÖÌå
  483   3                              else temp=asc2_1608[num][pos];           //µ÷ÓÃ1608×ÖÌå
  484   3                              for(t=0;t<size/2;t++)
  485   3                              {
  486   4                                      if(temp&0x01)LCD_WR_DATA_16Bit(fc); 
  487   4                                      else LCD_WR_DATA_16Bit(bc); 
  488   4                                      temp>>=1; 
  489   4                              }
  490   3                      }
  491   2              }
  492   1              else//µþ¼Ó·½Ê½
  493   1              {
  494   2                      for(pos=0;pos<size;pos++)
  495   2                      {
  496   3                              if(size==12)temp=asc2_1206[num][pos];//µ÷ÓÃ1206×ÖÌå
  497   3                              else temp=asc2_1608[num][pos];           //µ÷ÓÃ1608×ÖÌå
  498   3                              for(t=0;t<size/2;t++)
  499   3                              {
  500   4                                      POINT_COLOR=fc;
  501   4                                      if(temp&0x01)   LCD_DrawPoint(x+t,y+pos);//»­Ò»¸öµã
  502   4                                      temp>>=1;
  503   4                              }
  504   3                      }
  505   2              }
  506   1              POINT_COLOR=colortemp;  
  507   1              LCD_SetWindows(0,0,LCD_W-1,LCD_H-1);//»Ö¸´´°¿ÚÎªÈ«ÆÁ                              
  508   1      }
  509          
  510          /*****************************************************************************
  511           * @name       :void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
  512           * @date       :2018-08-09 
  513           * @function   :Display Chinese and English strings
  514           * @parameters :x:the beginning x coordinate of the Chinese and English strings
  515                          y:the beginning y coordinate of the Chinese and English strings
  516                                                                          fc:the color value of Chinese and English strings
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 9   

  517                                                                          bc:the background color of Chinese and English strings
  518                                                                          str:the start address of the Chinese and English strings
  519                                                                          size:the size of Chinese and English strings
  520                                                                          mode:0-no overlying,1-overlying
  521           * @retvalue   :None
  522          ******************************************************************************/                    
  523          void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
  524          {                                       
  525   1              u16 x0=x;                                                                 
  526   1              u8 bHz=0;     //×Ö·û»òÕßÖÐÎÄ 
  527   1              while(*str!=0)//Êý¾ÝÎ´½áÊø
  528   1              { 
  529   2                      if(!bHz)
  530   2                      {
  531   3                              if(x>(LCD_W-size/2)||y>(LCD_H-size)) 
  532   3                              return;
  533   3                              if(*str>0x80)   bHz=1;//ÖÐÎÄ 
  534   3                              else              //×Ö·û
  535   3                              {
  536   4                                      if(*str==0x0D)//»»ÐÐ·ûºÅ
  537   4                                      {
  538   5                                              y+=size;
  539   5                                              x=x0;
  540   5                                              str++;
  541   5                                      }
  542   4                                      else
  543   4                                      {
  544   5                                              if(size>16)//×Ö¿âÖÐÃ»ÓÐ¼¯³É12X24 16X32µÄÓ¢ÎÄ×ÖÌå,ÓÃ8X16´úÌæ
  545   5                                              {  
  546   6                                                      LCD_ShowChar(x,y,fc,bc,*str,16,mode);
  547   6                                                      x+=8; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë 
  548   6                                              }
  549   5                                              else
  550   5                                              {
  551   6                                                      LCD_ShowChar(x,y,fc,bc,*str,size,mode);
  552   6                                                      x+=size/2; //×Ö·û,ÎªÈ«×ÖµÄÒ»°ë 
  553   6                                              }
  554   5                                      }
  555   4                                      str++;
  556   4                              }
  557   3                      }
  558   2                      else//ÖÐÎÄ
  559   2                      {
  560   3      //                      if(x>(lcddev.width-size)||y>(lcddev.height-size))
  561   3      //                      return;
  562   3      //                      bHz=0;//ÓÐºº×Ö¿â
  563   3      //                      if(size==32)
  564   3      //                      GUI_DrawFont32(x,y,fc,bc,str,mode);
  565   3      //                      else if(size==24)
  566   3      //                      GUI_DrawFont24(x,y,fc,bc,str,mode);
  567   3      //                      else
  568   3      //                      GUI_DrawFont16(x,y,fc,bc,str,mode);
  569   3      
  570   3                              str+=2;
  571   3                              x+=size;//ÏÂÒ»¸öºº×ÖÆ«ÒÆ
  572   3                      }
  573   2              }
  574   1      }
  575          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4591     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  APP_DMA_LCM                                                        26/07/23  10:59:23  PAGE 10  

  pdata size           =    ------     ------
  xdata size           =      4112     ------
  xdata-const size     =    ------     ------
  edata size           =        13         43
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        54     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
