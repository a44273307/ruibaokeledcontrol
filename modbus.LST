C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 1   


C51 COMPILER V9.05, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN modbus.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE modbus.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //----------------------------------------------------------------------------//
   2          //´Ë´úÂëÖ»Ö§³Ö×÷ÎªModbus´ÓÕ¾Éè±¸µÄModbus RTUÄ£Ê½
   3          //
   4          //Ö§³ÖµÄ¹¦ÄÜÂë£º
   5          //0x03 ¶Á±£³Ö¼Ä´æÆ÷£¨¶Á¶à¸ö±£³Ö¼Ä´æÆ÷µÄÖµ£¬ÓÐÐ§µØÎ»Îª0-99£©
   6          //0x06 Ð´µ¥¸ö¼Ä´æÆ÷£¨Ð´ÈëÒ»¸ö¼Ä´æÆ÷µÄÖµ£¬ÓÐÐ§µØÖ·Îª0-99£©
   7          //0x10 Ð´¶à¸ö¼Ä´æÆ÷£¨Ð´Èë¶à¸ö¼Ä´æÆ÷µÄÖµ£¬ÓÐÐ§µØÖ·Îª0-99£©
   8          //
   9          //Ö§³ÖµÄÒì³£Âë£º
  10          //0x01 ·Ç·¨¹¦ÄÜÂë£¨²»Ö§³ÖµÄ¹¦ÄÜÂë£©
  11          //0x02 ·Ç·¨Êý¾ÝµØÖ·£¨ÆðÊ¼µØÖ·²»ÔÚÓÐÐ§·¶Î§ÄÚ£©
  12          //0x03 ·Ç·¨Êý¾ÝÖµ£¨ÔÚÆðÊ¼µØÖ·µÄ»ù´¡ÉÏ£¬ÊýÁ¿ÊÇ²»ºÏ·¨µÄ£©
  13          //----------------------------------------------------------------------------//
  14          
  15          #include "MODBUS.h"
  16          #include "uart.h"
  17          #include "stc15f2k60s2.h"
  18          #include <string.h>
  19          // #include "sys.h"
  20          // #include "delay.h"
  21          // #include "usart.h"
  22          // #include "timer.h"
  23          // #include "modbusCRC.h"
  24          // #include "dma.h"
  25          // #include "io.h"
  26          // #include "24cxx.h"
  27          // #include "yunxingkongzhi.h"
  28          // #include "kongzhiban.h"
  29          // #include "pingmu.h"
  30          
  31          
  32          int Slave_Address=1;
  33          
  34          #define Modbus_ReadHoldingReg   3
  35          #define Modbus_WriteSingleReg   6
  36          #define Modbus_WriteMultipleReg 10       
  37          /* ±äÁ¿¶¨Òå ------------------------------------------------------------------*/
  38          uint8_t Modbus_Send_Buff[Modbus_Max_Send_Buff];                //·¢ËÍÊý¾Ý»º³åÇø
  39          uint8_t Modbus_Rcv_Buff[Modbus_Max_Rcv_Buff];                //½ÓÊÕÊý¾Ý»º³åÇø
  40          uint8_t Modbus_Timeout_Cnt;                                                        //¶¨Ê±Æ÷ÖÐ¶Ï¼ÆÊý
  41          uint8_t Modbus_Rcv_Cnt;                                                                //½ÓÊÕ×Ö½Ú¼ÆÊý
  42          uint8_t        Modbus_Rcv_flag;                                                        //Éè±¸½øÈë½ÓÊÕ×´Ì¬±
             -êÖ¾
  43          uint8_t Modbus_Cmd_flag;                                                        //Éè±¸½øÈëÃüÁî½âÎö×´Ì¬±êÖ¾
  44          uint8_t Modbus_Exe_flag;                                                        //Éè±¸½øÈëÃüÁîÖ´ÐÐ×´Ì¬±êÖ¾
  45          uint8_t Modbus_Function;                                                        //´ÓÕ¾Éè±¸ÐèÖ´ÐÐµÄ¹¦ÄÜ
  46          
  47          volatile uint16_t HoldingReg[100] = {0, 0, 0, 0};                                //±£³Ö¼Ä´æÆ÷
  48          int UART3_Handler=0;
  49          /* º¯Êý¶¨Òå ------------------------------------------------------------------*/
  50          
  51          //----------------------------------------------------------------------------//
  52          //º¯Êý¹¦ÄÜ£ºÖðÎ»¼ÆËã·¨CRC16Ð£Ñé£¬ÔÚModbusÖÐCRC½á¹ûÒª½øÐÐ¸ßµÍ×Ö½Ú½»»»£¬¼´µÍ×Ö½ÚÔÚÇ°£¬¸ß×Ö½ÚÔÚºó
  53          //Èë¿Ú²ÎÊý£ºpuchMsgÊÇÒª½øÐÐCRCÐ£ÑéµÄÏûÏ¢£»usDataLenÊÇÏûÏ¢ÖÐ×Ö½ÚÊý
  54          //³ö¿Ú²ÎÊý£º¼ÆËã³öÀ´µÄCRCÐ£ÑéÂë£¬16Î»³¤¶È
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 2   

  55          //×îºóÐÞ¸Ä£º2015.11.29
  56          //±¸×¢£º
  57          //----------------------------------------------------------------------------//
  58          void init_485()
  59          {
  60   1              
  61   1      }
  62          char cuncu_485()
  63           {
  64   1              // printf("cuncu_485 %d",1);
  65   1              return 1;
  66   1       }
  67          uint16_t Modbus_CRC16(uint8_t *puchMsg, uint8_t usDataLen)
  68          {
  69   1              uint16_t CRC_Cal = 0xFFFF;
  70   1              uint8_t CRC_High, CRC_Low;
  71   1              uint8_t i, j;
  72   1              
  73   1              for(j = 0; j < usDataLen; j++)
  74   1              {
  75   2                      CRC_Cal = CRC_Cal ^ *puchMsg++;
  76   2                      
  77   2                      for (i = 0; i < 8; i++)
  78   2                      {
  79   3                              if((CRC_Cal & 0x0001) == 0x0001)
  80   3                              {
  81   4                                      CRC_Cal = CRC_Cal >> 1;
  82   4                                      CRC_Cal = CRC_Cal ^ 0xA001;
  83   4                              }
  84   3                              else
  85   3                              {
  86   4                                      CRC_Cal = CRC_Cal >> 1;
  87   4                              }
  88   3                      }
  89   2              }
  90   1              
  91   1              CRC_High = (uint8_t)(CRC_Cal >> 8);
  92   1              CRC_Low = (uint8_t)(CRC_Cal & 0x00FF);
  93   1              
  94   1              return (CRC_Low << 8 | CRC_High);
  95   1              
  96   1      //        return CRC_Cal;
  97   1      
  98   1      }
  99          
 100          //----------------------------------------------------------------------------//
 101          //º¯Êý¹¦ÄÜ£ºModbus³õÊ¼»¯
 102          //Èë¿Ú²ÎÊý£ºIDÊÇ´ÓÕ¾Õ¾ºÅ
 103          //³ö¿Ú²ÎÊý£ºÎÞ
 104          //×îºóÐÞ¸Ä£º2015.11.20
 105          //±¸×¢£º
 106          //----------------------------------------------------------------------------//
 107          void Modbus_Init(void)
 108          {
 109   1              uint16_t i;
 110   1              
 111   1              //----------------------------------------------------------//
 112   1              //ModbusÏà¹Ø±äÁ¿³õÊ¼»¯
 113   1              //----------------------------------------------------------//
 114   1              Modbus_Timeout_Cnt = 0;
 115   1              Modbus_Rcv_Cnt = 0;
 116   1              Modbus_Rcv_flag = 0;
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 3   

 117   1              Modbus_Cmd_flag = 0;
 118   1              Modbus_Exe_flag = 0;
 119   1              
 120   1              for(i = 0; i < Modbus_Max_Rcv_Buff; i++)                //Çå³ý½ÓÊÕ»º³åÇø
 121   1              {
 122   2                      Modbus_Rcv_Buff[i] = '\0';
 123   2              }
 124   1              
 125   1              for(i = 0; i < Modbus_Max_Send_Buff; i++)                //Çå³ý·¢ËÍ»º³åÇø
 126   1              {
 127   2                      Modbus_Send_Buff[i] = '\0';
 128   2              }
 129   1              
 130   1              //----------------------------------------------------------//
 131   1              //TIM2¶¨Ê±Æ÷Ê¹ÄÜ
 132   1              //----------------------------------------------------------//
 133   1              //TIM_Cmd(TIM2, ENABLE);
 134   1      }
 135          int rectimes;
 136          void chuankou1jisuuan(unsigned char ans)
 137          {
 138   1              Modbus_Rcv_Buff[Modbus_Rcv_Cnt]=ans;
 139   1              Modbus_Rcv_Cnt++;
 140   1              rectimes=2;
 141   1      }
 142          int recover=0;
 143          void time1msjisuan()
 144          {
 145   1          if(rectimes>0)
 146   1          {
 147   2              rectimes--;
 148   2              if(rectimes==0)
 149   2              {
 150   3                  recover=1;
 151   3              }
 152   2          }    
 153   1      }
 154          
 155          void Modbus_Cmd(void);
 156          void Modbus_Exe(void);
 157          void chuliguankji()
 158          {
 159   1          if(0==strcmp(Modbus_Rcv_Buff,"@STCISP#"))
 160   1          {
 161   2              IAP_CONTR=0x60;
 162   2          }
 163   1              // @STCISP#
 164   1      }
 165          void jishouokjisuan()
 166          {
 167   1              chuliguankji();
 168   1              Modbus_Cmd_flag=1;//Êý¾Ý½ÓÊÜÍê,,½øÈëÖÐ¶Ï±êÖ¾Î»..
 169   1              Modbus_Cmd();     //Êý¾Ý´¦Àí,,          
 170   1              Modbus_Exe();     //´¦ÀíÍê·¢...    
 171   1              Modbus_ClearBuff();//ÅªÍêÁËÇåÀí»º³åÇø     
 172   1      }
 173          
 174          char dmatime=0;
 175          void DMA1_Channel2_IRQHandler(void)
 176          {
 177   1      
 178   1      }
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 4   

 179          //----------------------------------------------------------------------------//
 180          //º¯Êý¹¦ÄÜ£ºModbusÃüÁî½âÎöº¯Êý
 181          //Èë¿Ú²ÎÊý£ºÎÞ
 182          //³ö¿Ú²ÎÊý£ºÎÞ
 183          //×îºóÐÞ¸Ä£º2015.12.11
 184          //±¸×¢£º
 185          //----------------------------------------------------------------------------//
 186          void Modbus_Cmd(void)
 187          {
 188   1              uint8_t Modbus_CRC_Rcv_Hi;                //½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂë¸ß×Ö½Ú
 189   1              uint8_t Modbus_CRC_Rcv_Lo;                //½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂëµÍ×Ö½Ú
 190   1              uint16_t Modbus_CRC_Rcv;                //½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂë
 191   1              uint16_t Modbus_CRC_Cal;                //¸ù¾Ý½ÓÊÕµ½µÄÊý¾Ý¼ÆËã³öÀ´µÄCRCÖµ
 192   1              
 193   1              //----------------------------------------------------------//
 194   1              //¿ªÊ¼ÃüÁî½âÎö
 195   1              //----------------------------------------------------------//
 196   1              if(Modbus_Cmd_flag == 1)
 197   1              {
 198   2                      if(Modbus_Rcv_Cnt > 4)                //Èç¹û½ÓÊÕµ½µÄÒ»Ö¡µÄ×Ö½ÚÊý´óÓÚ4 Ê×ÏÈÈ·±£Ö¡µÄ³¤¶ÈÔÚÕý
             -³£·¶Î§
 199   2                      {
 200   3                              Modbus_CRC_Rcv_Lo = Modbus_Rcv_Buff[Modbus_Rcv_Cnt - 2];                          
             -              //½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂëµÍ×Ö½Ú
 201   3                              Modbus_CRC_Rcv_Hi = Modbus_Rcv_Buff[Modbus_Rcv_Cnt - 1];                          
             -              //½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂë¸ß×Ö½Ú
 202   3                              Modbus_CRC_Rcv = (uint16_t)(Modbus_CRC_Rcv_Lo << 8 | Modbus_CRC_Rcv_Hi);        //
             -½ÓÊÕµ½µÄModbusCRCÐ£ÑéÂë£¨16Î»£©
 203   3                              Modbus_CRC_Cal = Modbus_CRC16(Modbus_Rcv_Buff, Modbus_Rcv_Cnt - 2);               
             -         //¸ù¾Ý½ÓÊÕµ½µÄÊý¾Ý¼ÆËãCRCÖµ
 204   3                              if(Modbus_CRC_Cal == Modbus_CRC_Rcv)                //Èç¹û¼ÆËãµÄCRCÖµÓë½ÓÊÜµÄCRCÖµ
             -ÏàµÈ
 205   3                              {
 206   4                                      //USART_SendByte(USART1, 0xAC);
 207   4                                      if(Slave_Address == Modbus_Rcv_Buff[0])        //Èç¹ûÊÇ±¾»úµØÖ·
 208   4                                      {
 209   5                                              switch(Modbus_Rcv_Buff[1])                        //ÓÃswitch·ÖÖ§Óï
             -¾äÀ´È·¶¨¹¦ÄÜ
 210   5                                              {
 211   6                                              case Modbus_ReadHoldingReg:                                       
             -         //Èç¹ûÊÇ¶Á±£´æ¼Ä´æÆ÷
 212   6                                                      Modbus_Function = Modbus_ReadHoldingReg;        //½«´ÓÕ¾Éè
             -±¸ÐèÖ´ÐÐµÄ¹¦ÄÜ¸³ÖµÎª¶Á±£´æ¼Ä´æÆ÷
 213   6                                                      Modbus_Exe_flag = 1;                                      
             -          //Éè±¸½øÈëÃüÁîÖ´ÐÐ×´Ì¬
 214   6                                                      break;                                                    
             -                            //Ìø³ö·ÖÖ§Óï¾ä
 215   6                                                      
 216   6                                              case Modbus_WriteSingleReg:
 217   6                                                      Modbus_Function = Modbus_WriteSingleReg;        //½«´ÓÕ¾Éè
             -±¸ÐèÖ´ÐÐµÄ¹¦ÄÜ¸³ÖµÎªÐ´µ¥¸ö¼Ä´æÆ÷
 218   6                                                      Modbus_Exe_flag = 1;                                      
             -          //Éè±¸½øÈëÃüÁîÖ´ÐÐ×´Ì¬
 219   6                                                      break;                                                    
             -                            //Ìø³ö·ÖÖ§Óï¾ä
 220   6                                              
 221   6                                              case Modbus_WriteMultipleReg:
 222   6                                                      Modbus_Function = Modbus_WriteMultipleReg;        //½«´ÓÕ¾
             -Éè±¸ÐèÖ´ÐÐµÄ¹¦ÄÜ¸³ÖµÎªÐ´¶à¸ö¼Ä´æÆ÷
 223   6                                                      Modbus_Exe_flag = 1;                                      
             -          //Éè±¸½øÈëÃüÁîÖ´ÐÐ×´Ì¬
 224   6                                                      break;                                                    
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 5   

             -                            //Ìø³ö·ÖÖ§Óï¾ä
 225   6                                                      
 226   6                                              default:
 227   6                                                      Modbus_ErrorHandling(0x01);                //ËùÓÐ¹¦ÄÜÂë¶¼²
             -»·ûºÏ£¬Ôò·µ»Ø¹¦ÄÜÂë´íÎóÒì³£ÏìÓ¦±¨ÎÄ
 228   6                                                      return;
 229   6                                              }
 230   5                                      }
 231   4                                      
 232   4                                      else                //·ñÔòÇå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 233   4                                      {
 234   5                                              Modbus_ClearBuff();
 235   5                                      }
 236   4                              }
 237   3                              
 238   3                              else                //·ñÔòÇå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 239   3                              {
 240   4                                      Modbus_ClearBuff();
 241   4                              }
 242   3                              
 243   3                      }
 244   2                      
 245   2                      else                //·ñÔòÇå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 246   2                      {
 247   3                              Modbus_ClearBuff();
 248   3                      }
 249   2                      
 250   2                      Modbus_Cmd_flag = 0;                //Éè±¸ÍË³öÃüÁî½âÎö×´Ì¬±êÖ¾
 251   2              }
 252   1      }
 253          
 254          //----------------------------------------------------------------------------//
 255          //º¯Êý¹¦ÄÜ£ºModbusÃüÁîÖ´ÐÐº¯Êý
 256          //Èë¿Ú²ÎÊý£ºÎÞ
 257          //³ö¿Ú²ÎÊý£ºÎÞ
 258          //×îºóÐÞ¸Ä£º2015.12.6
 259          //±¸×¢£º
 260          //----------------------------------------------------------------------------//
 261          void Modbus_Exe(void)
 262          {
 263   1              if(Modbus_Exe_flag == 1)
 264   1              {
 265   2                      switch(Modbus_Function)
 266   2                      {
 267   3                      case Modbus_ReadHoldingReg:
 268   3                              Modbus_ReadHoldingReg_Process();
 269   3                              break;
 270   3                              
 271   3                      case Modbus_WriteSingleReg:
 272   3                              Modbus_WriteSingleReg_Process();
 273   3                              break;
 274   3                      
 275   3                      case Modbus_WriteMultipleReg:
 276   3                              Modbus_WriteMultipleReg_Process();
 277   3                              break;
 278   3                              
 279   3                      }
 280   2                      Modbus_Exe_flag = 0;
 281   2              }
 282   1      }
 283          
 284          //----------------------------------------------------------------------------//
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 6   

 285          //º¯Êý¹¦ÄÜ£º¹¦ÄÜÂë0x03£¬¶Á±£³Ö¼Ä´æÆ÷
 286          //Èë¿Ú²ÎÊý£ºÎÞ
 287          //³ö¿Ú²ÎÊý£ºÎÞ
 288          //×îºóÐÞ¸Ä£º2015.12.5
 289          //±¸×¢£º
 290          //----------------------------------------------------------------------------//
 291          void Modbus_ReadHoldingReg_Process(void)
 292          {
 293   1              uint8_t Send_Cnt;                        //·¢ËÍ×Ö½ÚÊýÁ¿
 294   1              uint16_t StartAddress_Reg;        //Òª¶ÁÈ¡µÄ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 295   1              uint16_t Num_Reg;                        //Òª¶ÁÈ¡µÄ¼Ä´æÆ÷µÄÊýÁ¿
 296   1              uint16_t CRC_Cal;                        //CRCÐ£ÑéÂë
 297   1              uint16_t i, j;                                //ÁÙÊ±±äÁ¿
 298   1              
 299   1              StartAddress_Reg = Modbus_Rcv_Buff[2] << 8 | Modbus_Rcv_Buff[3];        //´Ó½ÓÊÕÊý¾Ý»º³åÇøµÃµ½Òª¶Á
             -È¡µÄ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 300   1              Num_Reg = Modbus_Rcv_Buff[4] << 8 | Modbus_Rcv_Buff[5];                                //´Ó½ÓÊÕÊý¾
             -Ý»º³åÇøµÃµ½Òª¶ÁÈ¡µÄ¼Ä´æÆ÷ÊýÁ¿
 301   1              
 302   1              if(StartAddress_Reg < 100)                //¼Ä´æÆ÷ÆðÊ¼µØÖ·ÔÚÕýÈ··¶Î§ÄÚ
 303   1              {
 304   2                      if(StartAddress_Reg + Num_Reg < 100 && Num_Reg > 0)                //ÆðÊ¼µØÖ·+¼Ä´æÆ÷ÊýÁ¿Î»
             -ÓÚÕýÈ··¶Î§ÄÚ ²¢ÇÒ ¼Ä´æÆ÷ÊýÁ¿ÕýÈ·
 305   2                      {
 306   3                                                                                                                                                              
 307   3                              Send_Cnt = 3 + (Num_Reg << 1) + 2;                //¼ÆËã·¢ËÍ×Ö½ÚÊýÁ¿
 308   3                              Modbus_Send_Buff[0] = Slave_Address;                        //´ÓÕ¾µØÖ·
 309   3                              Modbus_Send_Buff[1] = Modbus_ReadHoldingReg;        //¹¦ÄÜÂë
 310   3                              Modbus_Send_Buff[2] = Num_Reg << 1;                                //¼Ä´æÆ÷×Ö½ÚÊýÁ
             -¿ µÈÓÚ ¼Ä´æÆ÷ÊýÁ¿³Ë2
 311   3                              
 312   3                              for(i = StartAddress_Reg, j = 3; i < StartAddress_Reg + Num_Reg; i++, j += 2)     
             -   //¶ÁÈ¡¼Ä´æÆ÷µÄÊý¾Ý
 313   3                              {
 314   4                                      Modbus_Send_Buff[j] = (uint8_t)(HoldingReg[i] >> 8);
 315   4                                      Modbus_Send_Buff[j + 1] = (uint8_t)(HoldingReg[i] & 0x00FF);
 316   4                              }
 317   3              
 318   3                              CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 3 + (Num_Reg << 1));                     
             -           //¼ÆËã·¢ËÍÊý¾ÝµÄCRCÐ£ÑéÂë
 319   3                              Modbus_Send_Buff[3 + (Num_Reg << 1)] = (uint8_t)(CRC_Cal >> 8);                   
             -             //ÏÈÊÇµÍ×Ö½Ú
 320   3                              Modbus_Send_Buff[3 + (Num_Reg << 1) + 1] = (uint8_t)(CRC_Cal & 0x00FF);           
             -     //ºóÊÇ¸ß×Ö½Ú
 321   3              
 322   3                              //USART_SendString(USART1, Modbus_Send_Buff, Send_Cnt);                        //·
             -¢ËÍÏìÓ¦±¨ÎÄ
 323   3                              HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,Send_Cnt);
 324   3                              //Modbus_ClearBuff();                //Çå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 325   3                      }
 326   2                      else
 327   2                      {
 328   3                              Modbus_ErrorHandling(0x03);                //·Ç·¨Êý¾ÝÖµ
 329   3                      }
 330   2              }
 331   1              
 332   1              else
 333   1              {
 334   2                      Modbus_ErrorHandling(0x02);                        //·Ç·¨Êý¾ÝµØÖ·
 335   2              }
 336   1              
 337   1      }
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 7   

 338          
 339          //----------------------------------------------------------------------------//
 340          //º¯Êý¹¦ÄÜ£º¹¦ÄÜÂë0x06£¬Ð´µ¥¸ö¼Ä´æÆ÷
 341          //Èë¿Ú²ÎÊý£ºÎÞ
 342          //³ö¿Ú²ÎÊý£ºÎÞ
 343          //×îºóÐÞ¸Ä£º2015.12.6
 344          //±¸×¢£º
 345          //----------------------------------------------------------------------------//
 346          void Modbus_WriteSingleReg_Process(void)
 347          {
 348   1              uint8_t Send_Cnt;                        //·¢ËÍ×Ö½ÚÊýÁ¿
 349   1              uint16_t Address_Reg;                //ÒªÐ´ÈëµÄ¼Ä´æÆ÷µØÖ·
 350   1              uint16_t Value_Reg;                        //ÒªÐ´ÈëµÄ¼Ä´æÆ÷Öµ
 351   1              uint16_t CRC_Cal;                        //CRCÐ£ÑéÂë
 352   1              
 353   1              Address_Reg = Modbus_Rcv_Buff[2] << 8 | Modbus_Rcv_Buff[3];                //´Ó½ÓÊÕÊý¾Ý»º³åÇøµÃµ½Ò
             -ªÐ´ÈëµÄ¼Ä´æÆ÷µØÖ·
 354   1              Value_Reg = Modbus_Rcv_Buff[4] << 8 | Modbus_Rcv_Buff[5];                //´Ó½ÓÊÕÊý¾Ý»º³åÇøµÃµ½ÒªÐ
             -´ÈëµÄ¼Ä´æÆ÷Öµ
 355   1              
 356   1              if(Address_Reg < 100)                //¼Ä´æÆ÷ÆðÊ¼µØÖ·ÔÚÕýÈ··¶Î§ÄÚ
 357   1              {
 358   2                                                              
 359   2                      Send_Cnt = 6 + 2;                //¼ÆËã·¢ËÍ×Ö½ÚÊýÁ¿
 360   2                      
 361   2                      HoldingReg[Address_Reg] = Value_Reg;                //½«ÒªÐ´ÈëµÄ¼Ä´æÆ÷ÖµÐ´Èë¼Ä´æÆ÷
 362   2                      
 363   2                      Modbus_Send_Buff[0] = Slave_Address;                                                      
             -                  //´ÓÕ¾µØÖ·
 364   2                      Modbus_Send_Buff[1] = Modbus_WriteSingleReg;                                              
             -          //¹¦ÄÜÂë
 365   2                      Modbus_Send_Buff[2] = (uint8_t)(Address_Reg >> 8);                                        
             -        //¼Ä´æÆ÷µØÖ·¸ß×Ö½Ú
 366   2                      Modbus_Send_Buff[3] = (uint8_t)(Address_Reg & 0x00FF);                                    
             -    //¼Ä´æÆ÷µØÖ·µÍ×Ö½Ú
 367   2                      Modbus_Send_Buff[4] = (uint8_t)(HoldingReg[Address_Reg] >> 8);                        //¼Ä
             -´æÆ÷Öµ¸ß×Ö½Ú
 368   2                      Modbus_Send_Buff[5] = (uint8_t)(HoldingReg[Address_Reg] & 0x00FF);                //¼Ä´æÆ÷
             -ÖµµÍ×Ö½Ú
 369   2                      
 370   2                      CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 6);                        //¼ÆËã·¢ËÍÊý¾ÝµÄCRCÐ£Ñ
             -éÂë
 371   2                      Modbus_Send_Buff[6] = (uint8_t)(CRC_Cal >> 8);                        //ÏÈÊÇµÍ×Ö½Ú
 372   2                      Modbus_Send_Buff[7] = (uint8_t)(CRC_Cal & 0x00FF);                //ºóÊÇ¸ß×Ö½Ú
 373   2                      
 374   2                     // USART_SendString(USART1, Modbus_Send_Buff, Send_Cnt);        //·¢ËÍÏìÓ¦±¨ÎÄ
 375   2                      HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,Send_Cnt);
 376   2                      //Modbus_ClearBuff();                //Çå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 377   2              }
 378   1              
 379   1              else
 380   1              {
 381   2                      Modbus_ErrorHandling(0x02);                        //·Ç·¨Êý¾ÝµØÖ·
 382   2              }
 383   1      }
 384          
 385          //----------------------------------------------------------------------------//
 386          //º¯Êý¹¦ÄÜ£º¹¦ÄÜÂë0x10£¬Ð´¶à¸ö¼Ä´æÆ÷
 387          //Èë¿Ú²ÎÊý£ºÎÞ
 388          //³ö¿Ú²ÎÊý£ºÎÞ
 389          //×îºóÐÞ¸Ä£º2015.12.9
 390          //±¸×¢£º
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 8   

 391          //----------------------------------------------------------------------------//
 392          void Modbus_WriteMultipleReg_Process(void)
 393          {
 394   1              uint8_t Send_Cnt;                        //·¢ËÍ×Ö½ÚÊýÁ¿
 395   1              uint16_t StartAddress_Reg;        //ÒªÐ´ÈëµÄ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 396   1              uint16_t Num_Reg;                        //ÒªÐ´ÈëµÄ¼Ä´æÆ÷µÄÊýÁ¿
 397   1              uint16_t CRC_Cal;                        //CRCÐ£ÑéÂë
 398   1              uint16_t i, j;                                //ÁÙÊ±±äÁ¿
 399   1              
 400   1              StartAddress_Reg = Modbus_Rcv_Buff[2] << 8 | Modbus_Rcv_Buff[3];        //´Ó½ÓÊÕÊý¾Ý»º³åÇøµÃµ½ÒªÐ´
             -ÈëµÄ¼Ä´æÆ÷ÆðÊ¼µØÖ·
 401   1              Num_Reg = Modbus_Rcv_Buff[4] << 8 | Modbus_Rcv_Buff[5];                                //´Ó½ÓÊÕÊý¾
             -Ý»º³åÇøµÃµ½ÒªÐ´ÈëµÄ¼Ä´æÆ÷ÊýÁ¿
 402   1              
 403   1              if(StartAddress_Reg < 100)                        //¼Ä´æÆ÷ÆðÊ¼µØÖ·ÔÚÕýÈ··¶Î§ÄÚ
 404   1              {
 405   2                      if(StartAddress_Reg + Num_Reg < 100 && Num_Reg > 0)                                //ÆðÊ¼µ
             -ØÖ·+¼Ä´æÆ÷ÊýÁ¿Î»ÓÚÕýÈ··¶Î§ÄÚ ²¢ÇÒ ¼Ä´æÆ÷ÊýÁ¿ÕýÈ·                        
 406   2                      {
 407   3                              for(i = StartAddress_Reg, j = 7; i < StartAddress_Reg + Num_Reg; i++, j += 2)     
             -   //½«ÒªÐ´ÈëµÄ¼Ä´æÆ÷ÖµÐ´Èë¼Ä´æÆ÷
 408   3                              {
 409   4                                      HoldingReg[i] = Modbus_Rcv_Buff[j] << 8 | Modbus_Rcv_Buff[j + 1];
 410   4                              }
 411   3                              Send_Cnt = 6 + 2;
 412   3                      
 413   3                              Modbus_Send_Buff[0] = Slave_Address;                                              
             -  //´ÓÕ¾µØÖ·
 414   3                              Modbus_Send_Buff[1] = Modbus_WriteMultipleReg;                                //¹¦
             -ÄÜÂë
 415   3                              Modbus_Send_Buff[2] = (uint8_t)(StartAddress_Reg >> 8);                //¼Ä´æÆ÷ÆðÊ
             -¼µØÖ·¸ß×Ö½Ú
 416   3                              Modbus_Send_Buff[3] = (uint8_t)(StartAddress_Reg & 0x00FF);        //¼Ä´æÆ÷ÆðÊ¼µØÖ
             -·µÍ×Ö½Ú
 417   3                              Modbus_Send_Buff[4] = (uint8_t)(Num_Reg >> 8);                                //¼Ä
             -´æÆ÷ÊýÁ¿¸ß×Ö½Ú
 418   3                              Modbus_Send_Buff[5] = (uint8_t)(Num_Reg & 0x00FF);                        //¼Ä´æÆ÷
             -ÊýÁ¿µÍ×Ö½Ú
 419   3                              
 420   3                              CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 6);                        //¼ÆËã·¢ËÍÊý¾Ý
             -µÄCRCÐ£ÑéÂë
 421   3                              Modbus_Send_Buff[6] = (uint8_t)(CRC_Cal >> 8);                        //ÏÈÊÇµÍ×Ö½Ú
 422   3                              Modbus_Send_Buff[7] = (uint8_t)(CRC_Cal & 0x00FF);                //ºóÊÇ¸ß×Ö½Ú
 423   3                              
 424   3                             // USART_SendString(USART1, Modbus_Send_Buff, Send_Cnt);        //·¢ËÍÏìÓ¦±¨ÎÄ
 425   3                              HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,Send_Cnt);
 426   3                              //Modbus_ClearBuff();                //Çå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 427   3                      }
 428   2                      
 429   2                      else
 430   2                      {
 431   3                              Modbus_ErrorHandling(0x03);
 432   3                      }
 433   2              }
 434   1              
 435   1              else
 436   1              {
 437   2                      Modbus_ErrorHandling(0x02);
 438   2              }
 439   1      }
 440          
 441          //----------------------------------------------------------------------------//
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 9   

 442          //º¯Êý¹¦ÄÜ£º´íÎó´¦Àí
 443          //Èë¿Ú²ÎÊý£ºErrorTypeÊÇ´íÎóÀàÐÍ
 444          //³ö¿Ú²ÎÊý£ºÎÞ
 445          //×îºóÐÞ¸Ä£º2015.12.11
 446          //±¸×¢£º
 447          //----------------------------------------------------------------------------//
 448          void Modbus_ErrorHandling(uint8_t ErrorType)
 449          {
 450   1              uint16_t CRC_Cal;                        //CRCÐ£ÑéÂë
 451   1              
 452   1              switch(ErrorType)                        //ÓÃswitch·ÖÖ§Óï¾äÀ´È·¶¨ModbusÒì³£Âë
 453   1              {
 454   2              case 0x01:                                        //·Ç·¨¹¦ÄÜÂë
 455   2                      Modbus_Send_Buff[0] = Slave_Address;                                        //´ÓÕ¾µØÖ·
 456   2                      Modbus_Send_Buff[1] = Modbus_Rcv_Buff[1] + 0x80;                //Òì³£¹¦ÄÜÂë
 457   2                      Modbus_Send_Buff[2] = 0x01;                                                               
             - //Òì³£Âë
 458   2                      CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 3);                        //¼ÆËã·¢ËÍÊý¾ÝµÄCRCÐ£Ñ
             -éÂë
 459   2                      Modbus_Send_Buff[3] = (uint8_t)(CRC_Cal >> 8);                        //ÏÈÊÇµÍ×Ö½Ú
 460   2                      Modbus_Send_Buff[4] = (uint8_t)(CRC_Cal & 0x00FF);                //ºóÊÇ¸ß×Ö½Ú
 461   2                      
 462   2                      //USART_SendString(USART1, Modbus_Send_Buff, 5);                        //·¢ËÍÒì³£ÏìÓ¦±¨ÎÄ
 463   2                                              HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,5);
 464   2                      break;
 465   2                      
 466   2              case 0x02:                                        //·Ç·¨Êý¾ÝµØÖ·
 467   2                      Modbus_Send_Buff[0] = Slave_Address;                                        //´ÓÕ¾µØÖ·
 468   2                      Modbus_Send_Buff[1] = Modbus_Rcv_Buff[1] + 0x80;                //Òì³£¹¦ÄÜÂë
 469   2                      Modbus_Send_Buff[2] = 0x02;                                                               
             - //Òì³£Âë
 470   2                      CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 3);                        //¼ÆËã·¢ËÍÊý¾ÝµÄCRCÐ£Ñ
             -éÂë
 471   2                      Modbus_Send_Buff[3] = (uint8_t)(CRC_Cal >> 8);                        //ÏÈÊÇµÍ×Ö½Ú
 472   2                      Modbus_Send_Buff[4] = (uint8_t)(CRC_Cal & 0x00FF);                //ºóÊÇ¸ß×Ö½Ú
 473   2                      
 474   2                      //USART_SendString(USART1, Modbus_Send_Buff, 5);                        //·¢ËÍÒì³£ÏìÓ¦±¨ÎÄ
 475   2                                              HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,5);
 476   2                      break;
 477   2                      
 478   2              case 0x03:                                        //·Ç·¨Êý¾ÝÖµ
 479   2                      Modbus_Send_Buff[0] = Slave_Address;                                        //´ÓÕ¾µØÖ·
 480   2                      Modbus_Send_Buff[1] = Modbus_Rcv_Buff[1] + 0x80;                //Òì³£¹¦ÄÜÂë
 481   2                      Modbus_Send_Buff[2] = 0x03;                                                               
             - //Òì³£Âë
 482   2                      CRC_Cal = Modbus_CRC16(Modbus_Send_Buff, 3);                        //¼ÆËã·¢ËÍÊý¾ÝµÄCRCÐ£Ñ
             -éÂë
 483   2                      Modbus_Send_Buff[3] = (uint8_t)(CRC_Cal >> 8);                        //ÏÈÊÇµÍ×Ö½Ú
 484   2                      Modbus_Send_Buff[4] = (uint8_t)(CRC_Cal & 0x00FF);                //ºóÊÇ¸ß×Ö½Ú
 485   2                      
 486   2                      //USART_SendString(USART1, Modbus_Send_Buff, 5);                        //·¢ËÍÒì³£ÏìÓ¦±¨ÎÄ
 487   2                                              HAL_UART_Transmit_DMA_485(&UART3_Handler,(u8*)Modbus_Send_Buff,5);
 488   2                      break;
 489   2      //        default:
 490   2      //                return;
 491   2                      
 492   2              }
 493   1              
 494   1              //Modbus_ClearBuff();                //Çå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 495   1      }
 496          
 497          //----------------------------------------------------------------------------//
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 10  

 498          //º¯Êý¹¦ÄÜ£ºÇå¿Õ½ÓÊÕÊý¾Ý»º³åÇøºÍ·¢ËÍÊý¾Ý»º³åÇø
 499          //Èë¿Ú²ÎÊý£ºÎÞUSAR
 500          //³ö¿Ú²ÎÊý£ºÎÞ
 501          //×îºóÐÞ¸Ä£º2015.12.5
 502          //±¸×¢£º
 503          //----------------------------------------------------------------------------//
 504          void Modbus_ClearBuff(void)
 505          {
 506   1              uint16_t i;
 507   1              for(i = 0; i < Modbus_Max_Rcv_Buff; i++)                //Çå³ý½ÓÊÕ»º³åÇø
 508   1              {
 509   2                      Modbus_Rcv_Buff[i] = '\0';
 510   2              }
 511   1              Modbus_Rcv_Cnt = 0;                        //½ÓÊÕ×Ö½Ú¼ÆÊýÇå0
 512   1              
 513   1              for(i = 0; i < Modbus_Max_Send_Buff; i++)                //Çå³ý·¢ËÍ»º³åÇø
 514   1              {
 515   2                      Modbus_Send_Buff[i] = '\0';
 516   2              }
 517   1              
 518   1      }
 519          
 520          //----------------------------------------------------------------------------//
 521          //º¯Êý¹¦ÄÜ£º°ÑÒ»¸ö×Ö½ÚµÄ¸ß4Î»Ê®Áù½øÖÆÊý´æµ½ÁíÒ»¸ö×Ö½ÚµÄµÍ4Î»Àï
 522          //Èë¿Ú²ÎÊý£ºÒ»¸ö×Ö½ÚµÄÊý¾Ý
 523          //³ö¿Ú²ÎÊý£ºÁíÒ»¸ö×Ö½Ú
 524          //×îºóÐÞ¸Ä£º2015.11.28
 525          //±¸×¢£º
 526          //----------------------------------------------------------------------------//
 527          uint8_t High4BitsToOneByte(uint8_t Byte)
 528          {
 529   1              uint8_t tempByte;
 530   1              
 531   1              tempByte = (Byte >> 4) & 0x0F;
 532   1              
 533   1              return tempByte; 
 534   1      }
 535          
 536          //----------------------------------------------------------------------------//
 537          //º¯Êý¹¦ÄÜ£º°ÑÒ»¸ö×Ö½ÚµÄµÍ4Î»Ê®Áù½øÖÆÊý´æµ½ÁíÒ»¸ö×Ö½ÚµÄµÍ4Î»Àï
 538          //Èë¿Ú²ÎÊý£ºÒ»¸ö×Ö½ÚµÄÊý¾Ý
 539          //³ö¿Ú²ÎÊý£ºÁíÒ»¸ö×Ö½Ú
 540          //×îºóÐÞ¸Ä£º2015.11.28
 541          //±¸×¢£º
 542          //----------------------------------------------------------------------------//
 543          uint8_t Low4BitsToOneByte(uint8_t Byte)
 544          {
 545   1              uint8_t tempByte;
 546   1              
 547   1              tempByte = Byte & 0x0F;
 548   1              
 549   1              return tempByte; 
 550   1      }
 551          
 552          //----------------------------------------------------------------------------//
 553          //º¯Êý¹¦ÄÜ£º°ÑµÍ4Î»16½øÖÆÊý×ª»»ÎªÔÚOLED×Ö¿âÉÏ¶ÔÓ¦µÄ0~9ºÍA~F
 554          //Èë¿Ú²ÎÊý£ºHexByteÊÇµÍ4Î»16½øÖÆÊý
 555          //³ö¿Ú²ÎÊý£ºOLED×Ö¿âÉÏ¶ÔÓ¦µÄ0~9ºÍA~F
 556          //×îºóÐÞ¸Ä£º2015.11.28
 557          //±¸×¢£º
 558          //----------------------------------------------------------------------------//
 559          uint8_t HexToOLEDAsc(uint8_t HexByte)
C51 COMPILER V9.05   MODBUS                                                                06/03/2023 19:34:58 PAGE 11  

 560          {
 561   1              if((HexByte >= 0x00) && (HexByte <= 0x09))                        //Êý×Ö0~9
 562   1              {
 563   2                      HexByte += 0x30;
 564   2              }
 565   1              else if((HexByte >= 0x0A) && (HexByte <= 0x0F))        //Êý×ÖA~F
 566   1              {
 567   2                      HexByte += 0x37;
 568   2              }
 569   1              else
 570   1              {
 571   2                      HexByte = 0xff;
 572   2              }
 573   1              
 574   1              return HexByte; 
 575   1      }
 576          void HAL_UART_Transmit_DMA_485(int *huart, uint8_t *pData, uint16_t Size)
 577          {
 578   1              int i;
 579   1              for(i=0;i<Size;i++)
 580   1              {
 581   2                      sendbyte1(pData[i]);
 582   2              }
 583   1      }
*** WARNING C280 IN LINE 576 OF modbus.c: 'huart': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1718    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =    315      36
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
