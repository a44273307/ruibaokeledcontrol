C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil2\C51\BIN\C51.EXE main.c LARGE ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /************************************************************************************
   2             
   3          程序名称： （晶振频率18.432MHz） 
   4          功能说明: 通过串口3发送“Everything is possible!”  
   5                    波特率9600，数据位8，奇偶效验无，停止位1，数据流控制无  
   6          ************************************************************************************/
   7          #include "stc15f2k60s2.h"           // 单片机STC15F2K60S2头文件,可以不再加入reg51.h
   8          #include <intrins.h>                                    // 加入此头文件后,可使用_nop_库函数
   9          #include "delay.h"                      // 延时函数头文件
  10          #include "uart.h"                               // 串行通信函数头文件
  11          #define  uint unsigned int  
  12          #define  uchar unsigned char    
  13          #include <stdio.h>
  14          #include <string.h>
  15          #include "MODBUS.h"
  16          
  17          #include <stdio.h>
  18          #include <string.h>
  19          #include <stdlib.h>
  20          #include "tongxin2.h"
  21          #include "EEPROM.h"
  22          char buf3[60];
  23          char flag3 = 0;
  24          int weishu3;
  25          int timeleft1, timeleft2, timeleft3, timeleft4;
  26          void com1clearbuf()
  27          {
  28   1          memset(buf3, 0, sizeof(buf3));
  29   1              weishu3 = 0;
  30   1      }
  31          void chuankou1put(char c)
  32          {
  33   1              buf3[weishu3++] = c;
  34   1              if (weishu3 > sizeof(buf3) - 3)
  35   1                      weishu3 = 0;
  36   1              timeleft3 = 3;
  37   1      }
  38          void dealchuankou();    
  39          void chuliguankji();
  40          void chuankou1time()
  41          {
  42   1              if (timeleft3 > 0)
  43   1              {
  44   2                      timeleft3--;
  45   2                      if (timeleft3 == 0) // 数据一次收完了.
  46   2                      {
  47   3                              flag3 = 1;
  48   3                  dealchuankou();     
  49   3                      }
  50   2              }
  51   1      }
  52          
  53          
  54          
  55          
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 2   

  56          char* mystrstr(const char* haystack, const char* needle) {
  57   1          if (*needle == '\0') {
  58   2              return (char*)haystack;
  59   2          }
  60   1      
  61   1          while (*haystack != '\0') {
  62   2              const char* h = haystack;
  63   2              const char* n = needle;
  64   2      
  65   2              while (*n != '\0' && *h == *n) {
  66   3                  h++;
  67   3                  n++;
  68   3              }
  69   2      
  70   2              if (*n == '\0') {
  71   3                  return (char*)haystack; // 子串匹配成功，返回起始位置
  72   3              }
  73   2      
  74   2              haystack++;
  75   2          }
  76   1      
  77   1          return NULL; // 未找到子串，返回NULL
  78   1      }
  79          size_t mystrlen(const char* str) {
  80   1          size_t length = 0;
  81   1          while (str[length] != '\0') {
  82   2              length++;
  83   2          }
  84   1          return length;
  85   1      }
  86          
  87          char* myaddstrstr(const char* haystack, const char* needle)
  88          {       
  89   1              char* result = mystrstr(haystack, needle);
  90   1               if (result != NULL)
  91   1               {
  92   2                      result=result+mystrlen(needle);
  93   2               }
  94   1               return result;
  95   1      }
  96          void jixi2(char* input)
  97          {
  98   1              char *p=input;
  99   1              char *p1;
 100   1              int i;
 101   1              unsigned int weizhi;
 102   1              unsigned int zhi;
 103   1              //554-2234;333-4;end
 104   1          printf("input %s",input);
 105   1              for( i=0;i<100;i++)
 106   1              {
 107   2                      p1=myaddstrstr(p,";"); //找有没有下一个的
 108   2                      if(p1==NULL)
 109   2                      {
 110   3                              break;
 111   3                      }
 112   2                      weizhi = atoi(p);
 113   2                      p=myaddstrstr(p,"-");
 114   2                      zhi = atoi(p);
 115   2              printf("get set%d-%d",weizhi,zhi);
 116   2              push2(weizhi,zhi);
 117   2                      p=myaddstrstr(p,";");  //指向下一个后面
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 3   

 118   2                      
 119   2              }
 120   1      }
 121          void jiexi(char* input)
 122          {
 123   1              char par[100]={0};
 124   1              char *begin;
 125   1              char *end;
 126   1              begin=myaddstrstr(input,"set:");
 127   1              // printf("input begin%s",begin);
 128   1              end=myaddstrstr(begin,"end");
 129   1              // printf("input end%s",end);
 130   1              if(begin!=NULL && end!=NULL)
 131   1              {
 132   2                      strcpy(par,begin);
 133   2                      jixi2(par);
 134   2              }
 135   1      }
 136          
 137          char* my_strstr(const char* haystack, const char* needle) {
 138   1          if (*needle == '\0') {
 139   2              return (char*) haystack;
 140   2          }
 141   1      
 142   1          while (*haystack != '\0') {
 143   2              const char* h = haystack;
 144   2              const char* n = needle;
 145   2      
 146   2              while (*h == *n && *n != '\0') {
 147   3                  h++;
 148   3                  n++;
 149   3              }
 150   2      
 151   2              if (*n == '\0') {
 152   3                  return (char*) haystack;
 153   3              }
 154   2      
 155   2              haystack++;
 156   2          }
 157   1      
 158   1          return NULL;
 159   1      }
 160          
 161          // 串口的处理，，开机，解析等等。
 162          void dealchuankou()
 163          {
 164   1          chuliguankji();
 165   1              jiexi(buf3);
 166   1              memset(buf3, 0, sizeof(buf3));
 167   1              weishu3 = 0;
 168   1      }
 169          
 170          
 171          
 172          
 173          
 174          
 175          
 176          
 177          
 178          
 179          
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 4   

 180          
 181          
 182          
 183          
 184          int delay_mszhi;
 185          uint temp1,temp2,temp3,temp4;
 186          
 187          
 188          void io_inint()
 189          {
 190   1              P0M1 = 0;       P0M0 = 0;       //设置P0.0~P0.7为准双向口
 191   1        P1M0 = 0x00; // 设置P1.0为ADC口
 192   1        P1M1 = 0x80;
 193   1              P2M1 = 0;       P2M0 = 0;       //设置P2.0~P2.7为准双向口 
 194   1                  P3M0 = 0;
 195   1          P3M1 = 0;
 196   1              P4M1 = 0;       P4M0 = 0;       //设置P4.0~P4.7为准双向口
 197   1              // P5M1 = 0;    P5M0 = 0;       //设置P5.0~P5.7为准双向口
 198   1      
 199   1                  P5M0 = 0xff; P5M1 = 0x00; 
 200   1      
 201   1      }
 202          
 203          
 204          void delay_ms(int m);
 205          
 206          
 207          
 208          sbit out2=P3^2;
 209          
 210          extern void deanyan();
 211          sbit fen=P5^4;
 212          
 213          
 214          #define Iapid 0x0000
 215          void IapErase(int addr);
 216          void Exxwrite(int addr, uint dat);
 217          void writebuf()
 218          {
 219   1          int i;
 220   1          int dizhi=Iapid+1;
 221   1          IapErase(Iapid); // ????????
 222   1          for ( i = 0; i < len_HoldingReg; i++)
 223   1          {
 224   2              dizhi=dizhi+1;
 225   2              Exxwrite(dizhi,HoldingReg[i]);
 226   2             
 227   2          }
 228   1      }
 229          // 比较值是否发生了变化。。
 230          uint16_t bufcheck[len_HoldingReg]={0};
 231          void buffchecktongbu()
 232          {
 233   1          int i;
 234   1          for ( i = 0; i < len_HoldingReg; i++)
 235   1          {
 236   2              bufcheck[i]=HoldingReg[i];
 237   2          }
 238   1      }
 239          int IsbuffcheckFailed()
 240          {
 241   1          int i;
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 5   

 242   1          for ( i = 0; i < len_HoldingReg; i++)
 243   1          {
 244   2             if(bufcheck[i]!=HoldingReg[i])
 245   2             {
 246   3                return 1;
 247   3             }
 248   2          }
 249   1          return 0;
 250   1      }
 251          
 252          int timereport=0;
 253          void sendzhi(int weizhi,int zhi)
 254          {
 255   1          char out[30]={0};
 256   1          sprintf(out,"set:%d-%d;end",weizhi,zhi);
 257   1              printf(out);
 258   1      }
 259          void runreport()
 260          {
 261   1          if(timereport>300)
 262   1          {
 263   2              timereport=0;
 264   2              sendzhi(4,HoldingReg[4]);
 265   2          }
 266   1      }
 267          void chuliguankji()
 268          {
 269   1          char* index;
 270   1          index=strstr(buf3,"@STCISP#");
 271   1              if(index==NULL)
 272   1              {
 273   2                  return  ;
 274   2              }
 275   1          IAP_CONTR=0x60;
 276   1      }
 277          
 278          void IapIdle()
 279          {
 280   1          IAP_CONTR = 0;                              //关闭IAP功能
 281   1          IAP_CMD = 0;                                //清除命令寄存器
 282   1          IAP_TRIG = 0;                               //清除触发寄存器
 283   1          IAP_ADDRH = 0x80;                           //将地址设置到非IAP区域
 284   1          IAP_ADDRL = 0;
 285   1      }
 286          
 287          char IapRead(int addr)
 288          {
 289   1          char dat;
 290   1      
 291   1          IAP_CONTR = 0x80;                           //使能IAP
 292   1          IAP_TPS = 40;                               //设置等待参数12MHz
 293   1          IAP_CMD = 1;                                //设置IAP读命令
 294   1          IAP_ADDRL = addr;                           //设置IAP低地址
 295   1          IAP_ADDRH = addr >> 8;                      //设置IAP高地址
 296   1          IAP_TRIG = 0x5a;                            //写触发命令(0x5a)
 297   1          IAP_TRIG = 0xa5;                            //写触发命令(0xa5)
 298   1          _nop_();
 299   1          dat = IAP_DATA;                             //读IAP数据
 300   1          IapIdle();                                  //关闭IAP功能
 301   1      
 302   1          return dat;
 303   1      }
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 6   

 304          
 305          void IapProgram(int addr, char dat)
 306          {
 307   1          IAP_CONTR = 0x80;                           //使能IAP
 308   1          IAP_TPS = 40;                               //设置等待参数12MHz
 309   1          IAP_CMD = 2;                                //设置IAP写命令
 310   1          IAP_ADDRL = addr;                           //设置IAP低地址
 311   1          IAP_ADDRH = addr >> 8;                      //设置IAP高地址
 312   1          IAP_DATA = dat;                             //写IAP数据
 313   1          IAP_TRIG = 0x5a;                            //写触发命令(0x5a)
 314   1          IAP_TRIG = 0xa5;                            //写触发命令(0xa5)
 315   1          _nop_();
 316   1          IapIdle();                                  //关闭IAP功能
 317   1      }
 318          
 319          void IapErase(int addr)
 320          {
 321   1          IAP_CONTR = 0x80;                           //使能IAP
 322   1          IAP_TPS = 40;                               //设置等待参数12MHz
 323   1          IAP_CMD = 3;                                //设置IAP擦除命令
 324   1          IAP_ADDRL = addr;                           //设置IAP低地址
 325   1          IAP_ADDRH = addr >> 8;                      //设置IAP高地址
 326   1          IAP_TRIG = 0x5a;                            //写触发命令(0x5a)
 327   1          IAP_TRIG = 0xa5;                            //写触发命令(0xa5)
 328   1          _nop_();                                    //
 329   1          IapIdle();                                  //关闭IAP功能
 330   1      }
 331          
 332          
 333          
 334          void Exxwrite(int addr, uint dat)
 335          {
 336   1          addr=addr*2;
 337   1          IapProgram(addr,dat/256);
 338   1          IapProgram(addr+1,dat%256);
 339   1      }
 340          uint ExxRead(int addr)
 341          {
 342   1          uint dat;
 343   1          addr=addr*2;
 344   1          dat=IapRead(addr);
 345   1          dat=dat*256;
 346   1          dat=dat+IapRead(addr+1);
 347   1          return dat;
 348   1      }
 349          
 350          void readbuf()
 351          {
 352   1          int i;
 353   1          int zhi;
 354   1          int dizhi=Iapid+1;
 355   1          for ( i = 0; i < len_HoldingReg; i++)
 356   1          {
 357   2              dizhi=dizhi+1;
 358   2              HoldingReg[i]=ExxRead(dizhi);
 359   2              // delay_ms(4);
 360   2              zhi=HoldingReg[i];
 361   2              printf("HoldingReg[%d]-[%d]\n",i,zhi);
 362   2      
 363   2          }
 364   1      }
 365          void initbuf()
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 7   

 366          {
 367   1          int i;
 368   1          for ( i = 0; i < len_HoldingReg; i++)
 369   1          {
 370   2              HoldingReg[i]=0;
 371   2          }
 372   1          readbuf();
 373   1      }
 374          
 375          void getzhiandchange()
 376          {
 377   1          int weizhi,zhi;
 378   1          Alltongxininfo2 get={0};
 379   1          pop22(&get);
 380   1          if(get.weizhi==0)
 381   1          {
 382   2              return ;
 383   2          }
 384   1          weizhi=get.weizhi;
 385   1          zhi=get.zhi;
 386   1          printf("getzhiandchange weizhi[%d] zhi[%d]\n",weizhi,zhi);
 387   1          if(weizhi<len_HoldingReg)
 388   1          {
 389   2              HoldingReg[weizhi]=zhi;
 390   2          }
 391   1          if(weizhi==4 || weizhi==2)
 392   1              {
 393   2                      deanyan();
 394   2              }
 395   1          if(IsbuffcheckFailed())
 396   1          {
 397   2              printf("xiugaidata begin\n");
 398   2              delay_mszhi=0;
 399   2              buffchecktongbu();
 400   2              writebuf();
 401   2              printf("HoldingReg[4] %d",HoldingReg[4]);
 402   2              printf("xiugaidata end %d\n",delay_mszhi);
 403   2              readbuf();
 404   2          }
 405   1      }
 406          void main()                                                    
 407          {
 408   1              io_inint();
 409   1          UartInit();
 410   1              Uart23Init();
 411   1              Timer0Init();
 412   1              Uart4Init();
 413   1              P_SW2 = 0x80;
 414   1          I2CCFG = 0xe0;                              //使能I2C主机模式
 415   1          I2CMSST = 0x00;
 416   1              EA = 1;
 417   1              out2=1;
 418   1              Modbus_ClearBuff();
 419   1          deanyan();
 420   1              delay_ms(100);
 421   1          printf("system init ok\n");
 422   1          initbuf();
 423   1          buffchecktongbu();
 424   1          printf("system init ok1");
 425   1          HoldingReg[2]=1;
 426   1          com1clearbuf();
 427   1          while (1)
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 8   

 428   1              {
 429   2           
 430   2              getzhiandchange();
 431   2              }
 432   1      } 
 433          int delay_mszhi;         
 434          uint time,lv_bo;
 435          void delay_ms(int m)
 436          {
 437   1          delay_mszhi=0;
 438   1          while (delay_mszhi<=m*2)
 439   1          {
 440   2              
 441   2          }
 442   1      }
 443          void Timer0() interrupt 1
 444          {
 445   1          chuankou1time();
 446   1              delay_mszhi++;
 447   1          timereport++;
 448   1      }
 449          void UARTInterrupt(void) interrupt 4
 450          {
 451   1              unsigned char ans;
 452   1              if (RI)
 453   1              {
 454   2                      RI = 0;
 455   2                      ans=SBUF;
 456   2              chuankou1put(ans);
 457   2              }
 458   1              else
 459   1              {
 460   2                      TI = 0;
 461   2              }
 462   1              if (TI) //发送中断..
 463   1              {
 464   2                      TI = 0;
 465   2              }
 466   1      }
 467          
 468          void uart2(void ) interrupt 8 
 469          {
 470   1        if (S2CON & S2RI)
 471   1              {
 472   2                      S2CON &= ~S2RI;         
 473   2                      temp2 = S2BUF;
 474   2              }
 475   1        if (S2CON & S2TI)
 476   1          {
 477   2                              //y1=0;
 478   2              S2CON &= ~S2TI;         //清除S2TI位
 479   2              busy2 = 0;               //清忙标志
 480   2          }  
 481   1      }
 482          
 483            
 484          
 485          
 486          void Uart3() interrupt 17 using 1
 487          {
 488   1          if (S3CON & S3RI)
 489   1          {
C51 COMPILER V9.00   MAIN                                                                  07/27/2023 21:36:29 PAGE 9   

 490   2              S3CON &= ~S3RI;         //??S3RI?
 491   2              temp3 = S3BUF;
 492   2                                      
 493   2         }
 494   1      if (S3CON & S3TI)
 495   1          {
 496   2              S3CON &= ~S3TI;         //清除S3TI位
 497   2              busy3 = 0;               //清忙标志
 498   2          }
 499   1      }
 500          
 501          void Uart4() interrupt 18 
 502          {
 503   1          if (S4CON & S4RI)
 504   1          {
 505   2              S4CON &= ~S4RI;         //??S4RI?
 506   2              temp4=S4BUF;
 507   2         }
 508   1      if(TI4)
 509   1              {
 510   2                      CLR_TI4();
 511   2                      busy4 = 0;               //清忙标志
 512   2              }
 513   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2512    ----
   CONSTANT SIZE    =    337    ----
   XDATA SIZE       =    107     219
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
