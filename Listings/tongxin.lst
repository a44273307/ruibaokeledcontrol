C251 COMPILER V5.60.0,  tongxin                                                            26/07/23  21:08:58  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE tongxin
OBJECT MODULE PLACED IN .\Objects\tongxin.obj
COMPILER INVOKED BY: D:\keilc251\C251\BIN\C251.EXE tongxin.c LARGE BROWSE DEBUG PRINT(.\Listings\tongxin.lst) TABS(2) OB
                    -JECT(.\Objects\tongxin.obj) 

stmt  level    source

    1          
    2          #include "stc32g.h"
    3          #include "config.h"
    4          
    5          
    6          #include <stdio.h>
    7          #include "tongxin.h"
    8          #define use 1
    9          #define use 1
   10          #define nouse 0
   11          #define maxzhi 10 
   12          
   13          Alltongxininfo tongxindata[maxzhi];
   14          void* memcpy(void* destination, const void* source, size_t num) {
   15   1      size_t i;   
   16   1        char* dest = (char*)destination;
   17   1          const char* src = (const char*)source;
   18   1      
   19   1          for ( i = 0; i < num; i++) {
   20   2              dest[i] = src[i];
   21   2          }
   22   1      
   23   1          return destination;
   24   1      }
   25          int  getemptyindex()
   26          {
   27   1          int i;
   28   1          for(i=0;i<maxzhi;i++)
   29   1          {
   30   2              if(tongxindata[i].falg==0)
   31   2              return i;
   32   2          }
   33   1          return i;
   34   1      }
   35          int empty()
   36          {
   37   1          if(0==getemptyindex())
   38   1          {
   39   2              return 1;
   40   2          }
   41   1          return 0;
   42   1      }
   43          int isfull()
   44          {
   45   1          if(maxzhi==getemptyindex())
   46   1          {
   47   2              return 1;
   48   2          }
   49   1          return 0;
   50   1      }
   51          
   52          void push(int weizhi,int zhi)
   53          {
   54   1          int dizhi;
   55   1          int i,j,k;
   56   1          dizhi=getemptyindex();
   57   1          // 有就更新
   58   1          for(i=0;i<dizhi;i++)
C251 COMPILER V5.60.0,  tongxin                                                            26/07/23  21:08:58  PAGE 2   

   59   1          {
   60   2              if(tongxindata[i].weizhi==weizhi)
   61   2              {
   62   3                  tongxindata[i].zhi=zhi;
   63   3                  return;
   64   3              }
   65   2          }
   66   1          // 满了丢
   67   1          if(maxzhi==getemptyindex())
   68   1          {
   69   2              return ;
   70   2          }
   71   1          // 入。
   72   1          // dizhi=dizhi;
   73   1          tongxindata[dizhi].weizhi=weizhi;
   74   1          tongxindata[dizhi].zhi=zhi;
   75   1          tongxindata[dizhi].falg=1;
   76   1      }
*** WARNING C47 IN LINE 55 OF tongxin.c: 'j': unreferenced local variable
*** WARNING C47 IN LINE 55 OF tongxin.c: 'k': unreferenced local variable
   77          void show()
   78          {
   79   1          int i,j,k;
   80   1          int dizhi=getemptyindex();
   81   1          for(i=0;i<dizhi;i++)
   82   1          {
   83   2           //   printf("dizhi[%d]-[%d]\n",tongxindata[i].weizhi,tongxindata[i].zhi);
   84   2          }
   85   1      }
*** WARNING C47 IN LINE 79 OF tongxin.c: 'j': unreferenced local variable
*** WARNING C47 IN LINE 79 OF tongxin.c: 'k': unreferenced local variable
   86          void pushshow(int weizhi,int zhi)
   87          {
   88   1          push(weizhi,zhi);
   89   1          show();
   90   1      }
   91          void deal(Alltongxininfo get)
   92          {
   93   1          //printf("dizhi[%d]-[%d]-[%d]\n",get.weizhi,get.zhi,get.falg);
   94   1      
   95   1      }
*** WARNING C47 IN LINE 91 OF tongxin.c: 'get': unreferenced parameter
   96          int pop()
   97          {
   98   1          int i,j,k;
   99   1          int dizhi=getemptyindex();
  100   1          Alltongxininfo get;
  101   1          if(0==getemptyindex())
  102   1          {
  103   2              return 0;
  104   2          }
  105   1          memcpy(&get,&tongxindata[0],sizeof(Alltongxininfo));
  106   1          for(i=0;i<dizhi-1;i++)
  107   1          {
  108   2              memcpy(&tongxindata[i],&tongxindata[i+1],sizeof(Alltongxininfo));
  109   2          }
  110   1          return 1;
  111   1      }
*** WARNING C47 IN LINE 98 OF tongxin.c: 'j': unreferenced local variable
*** WARNING C47 IN LINE 98 OF tongxin.c: 'k': unreferenced local variable
  112          
  113          int pop2(Alltongxininfo *get)
  114          {
  115   1          int i,j,k;
  116   1          int dizhi=getemptyindex();
  117   1          if(0==getemptyindex())
C251 COMPILER V5.60.0,  tongxin                                                            26/07/23  21:08:58  PAGE 3   

  118   1          {
  119   2              return 0;
  120   2          }
  121   1          memcpy(get,&tongxindata[0],sizeof(Alltongxininfo));
  122   1          for(i=0;i<dizhi-1;i++)
  123   1          {
  124   2              memcpy(&tongxindata[i],&tongxindata[i+1],sizeof(Alltongxininfo));
  125   2          }
  126   1          tongxindata[dizhi-1].falg=nouse;
  127   1          return 1;
  128   1      }
*** WARNING C47 IN LINE 115 OF tongxin.c: 'j': unreferenced local variable
*** WARNING C47 IN LINE 115 OF tongxin.c: 'k': unreferenced local variable
  129          
  130          
  131          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       532     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        60         18
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  9 WARNING(S),  0 ERROR(S)
