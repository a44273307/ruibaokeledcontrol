C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE lcd
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: D:\keilc251\C251\BIN\C251.EXE lcd.c XSMALL BROWSE DEBUG PRINT(.\Listings\lcd.lst) TABS(2) OBJECT(.\
                    -Objects\lcd.obj) 

stmt  level    source

    1          #include "lcd.h"
    2          
    3          #include "lcdfont.h"
    4          #include    <intrins.h>
    5          
    6               
    7          
    8          
    9          void SPI_RW(unsigned char byte)
   10          {
   11   1        
   12   1        unsigned char bit_ctr;
   13   1        
   14   1        for(bit_ctr=0;bit_ctr<8;bit_ctr++) // 输出8位
   15   1        {
   16   2          LCD_SCK=0;
   17   2          LCD_MOSI=(byte&0x80); // MSB TO MOSI
   18   2          byte=(byte<<1); // shift next bit to MSB
   19   2          LCD_SCK=1;
   20   2          byte|=LCD_MISO;         // capture current MISO bit
   21   2        }
   22   1        //return byte;
   23   1      }
   24          
   25          
   26          void Delay1ms()   //@11.0592MHz
   27          {
   28   1        unsigned long i;
   29   1      
   30   1        _nop_();
   31   1        _nop_();
   32   1        _nop_();
   33   1        i = 5998UL;
   34   1        while (i) i--;
   35   1      }
   36          
   37          
   38          void delay_ms(unsigned int ms)
   39          {
   40   1        while(ms--)
   41   1        {
   42   2          Delay1ms();
   43   2        }
   44   1      }
   45          void LCD_CD_DATA(unsigned char val)
   46          {
   47   1        LCD_CS=0;
   48   1        LCD_CD=1;
   49   1        SPI_RW(val);
   50   1        LCD_CS=1;
   51   1      }
   52          
   53          void LCD_CD_REG(unsigned char reg)
   54          {
   55   1        LCD_CS=0;
   56   1        LCD_CD=0;
   57   1        SPI_RW(reg);
   58   1        LCD_CS=1;
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 2   

   59   1      }
   60          int USE_HORIZONTAL=0;
   61          void LCD_Init()
   62          {
   63   1      //  P0=0;
   64   1      //  P2=0;
   65   1        LCD_RESET=0;
   66   1        delay_ms(1);
   67   1        LCD_RESET=0;
   68   1        delay_ms(10);
   69   1        LCD_RESET=1;
   70   1        delay_ms(120);
   71   1      
   72   1      //************* Start Initial Sequence **********//
   73   1        LCD_CD_REG(0xCF);  
   74   1        LCD_CD_DATA(0x00); 
   75   1        LCD_CD_DATA(0xC1); 
   76   1        LCD_CD_DATA(0X30); 
   77   1        LCD_CD_REG(0xED);  
   78   1        LCD_CD_DATA(0x64); 
   79   1        LCD_CD_DATA(0x03); 
   80   1        LCD_CD_DATA(0X12); 
   81   1        LCD_CD_DATA(0X81); 
   82   1        LCD_CD_REG(0xE8);  
   83   1        LCD_CD_DATA(0x85); 
   84   1        LCD_CD_DATA(0x10); 
   85   1        LCD_CD_DATA(0x7A); 
   86   1        LCD_CD_REG(0xCB);  
   87   1        LCD_CD_DATA(0x39); 
   88   1        LCD_CD_DATA(0x2C); 
   89   1        LCD_CD_DATA(0x00); 
   90   1        LCD_CD_DATA(0x34); 
   91   1        LCD_CD_DATA(0x02); 
   92   1        LCD_CD_REG(0xF7);  
   93   1        LCD_CD_DATA(0x20); 
   94   1        LCD_CD_REG(0xEA);  
   95   1        LCD_CD_DATA(0x00); 
   96   1        LCD_CD_DATA(0x00); 
   97   1        LCD_CD_REG(0xC0);    //Power control 
   98   1        LCD_CD_DATA(0x1B);   //VRH[5:0] 
   99   1        LCD_CD_REG(0xC1);    //Power control 
  100   1        LCD_CD_DATA(0x01);   //SAP[2:0];BT[3:0] 
  101   1        LCD_CD_REG(0xC5);    //VCM control 
  102   1        LCD_CD_DATA(0x30);   //3F
  103   1        LCD_CD_DATA(0x30);   //3C
  104   1        LCD_CD_REG(0xC7);    //VCM control2 
  105   1        LCD_CD_DATA(0XB7); 
  106   1        LCD_CD_REG(0x36);    // Memory Access Control 
  107   1        LCD_CD_DATA(0x48); 
  108   1        LCD_CD_REG(0x3A);   
  109   1        LCD_CD_DATA(0x55); 
  110   1        LCD_CD_REG(0xB1);   
  111   1        LCD_CD_DATA(0x00);   
  112   1        LCD_CD_DATA(0x1A); 
  113   1        LCD_CD_REG(0xB6);    // Display Function Control 
  114   1        LCD_CD_DATA(0x0A); 
  115   1        LCD_CD_DATA(0xA2); 
  116   1        LCD_CD_REG(0xF2);    // 3Gamma Function Disable 
  117   1        LCD_CD_DATA(0x00); 
  118   1        LCD_CD_REG(0x26);    //Gamma curve selected 
  119   1        LCD_CD_DATA(0x01); 
  120   1        LCD_CD_REG(0xE0);    //Set Gamma 
  121   1        LCD_CD_DATA(0x0F); 
  122   1        LCD_CD_DATA(0x2A); 
  123   1        LCD_CD_DATA(0x28); 
  124   1        LCD_CD_DATA(0x08); 
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 3   

  125   1        LCD_CD_DATA(0x0E); 
  126   1        LCD_CD_DATA(0x08); 
  127   1        LCD_CD_DATA(0x54); 
  128   1        LCD_CD_DATA(0XA9); 
  129   1        LCD_CD_DATA(0x43); 
  130   1        LCD_CD_DATA(0x0A); 
  131   1        LCD_CD_DATA(0x0F); 
  132   1        LCD_CD_DATA(0x00); 
  133   1        LCD_CD_DATA(0x00); 
  134   1        LCD_CD_DATA(0x00); 
  135   1        LCD_CD_DATA(0x00);     
  136   1        LCD_CD_REG(0XE1);    //Set Gamma 
  137   1        LCD_CD_DATA(0x00); 
  138   1        LCD_CD_DATA(0x15); 
  139   1        LCD_CD_DATA(0x17); 
  140   1        LCD_CD_DATA(0x07); 
  141   1        LCD_CD_DATA(0x11); 
  142   1        LCD_CD_DATA(0x06); 
  143   1        LCD_CD_DATA(0x2B); 
  144   1        LCD_CD_DATA(0x56); 
  145   1        LCD_CD_DATA(0x3C); 
  146   1        LCD_CD_DATA(0x05); 
  147   1        LCD_CD_DATA(0x10); 
  148   1        LCD_CD_DATA(0x0F); 
  149   1        LCD_CD_DATA(0x3F); 
  150   1        LCD_CD_DATA(0x3F); 
  151   1        LCD_CD_DATA(0x0F); 
  152   1        LCD_CD_REG(0x2B); 
  153   1        LCD_CD_DATA(0x00);
  154   1        LCD_CD_DATA(0x00);
  155   1        LCD_CD_DATA(0x01);
  156   1        LCD_CD_DATA(0x3f);
  157   1        LCD_CD_REG(0x2A); 
  158   1        LCD_CD_DATA(0x00);
  159   1        LCD_CD_DATA(0x00);
  160   1        LCD_CD_DATA(0x00);
  161   1        LCD_CD_DATA(0xef);   
  162   1        LCD_CD_REG(0x11); //Exit Sleep
  163   1        delay_ms(120);
  164   1        LCD_CD_REG(0x29); //display on    
  165   1      }
  166          
  167          void LCD_SetArea(unsigned int stx,unsigned int sty,unsigned int endx,unsigned int endy)
  168          {
  169   1        LCD_CD_REG(0x2A);  
  170   1        LCD_CD_DATA(stx>>8);    
*** WARNING C188 IN LINE 170 OF lcd.c: 'parameter 1': value truncated
  171   1        LCD_CD_DATA(stx&0xff);      
  172   1        LCD_CD_DATA(endx>>8); 
*** WARNING C188 IN LINE 172 OF lcd.c: 'parameter 1': value truncated
  173   1        LCD_CD_DATA(endx&0xff); 
  174   1      
  175   1        LCD_CD_REG(0x2B);
  176   1        LCD_CD_DATA(sty>>8); 
*** WARNING C188 IN LINE 176 OF lcd.c: 'parameter 1': value truncated
  177   1        LCD_CD_DATA(sty&0xff);  
  178   1        LCD_CD_DATA(endy>>8); 
*** WARNING C188 IN LINE 178 OF lcd.c: 'parameter 1': value truncated
  179   1        LCD_CD_DATA(endy&0xff); 
  180   1      }
  181          
  182          void LcdWirteColorData(unsigned int color)
  183          {
  184   1        LCD_CS=0;
  185   1        LCD_CD=1;
  186   1        SPI_RW(color>>8);
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 4   

*** WARNING C188 IN LINE 186 OF lcd.c: 'parameter 1': value truncated
  187   1        SPI_RW(color&0xff);
  188   1        LCD_CS=1;
  189   1      }
  190          
  191          void LCD_Clear(unsigned int color)
  192          {  
  193   1        unsigned int i,j;
  194   1      
  195   1        LCD_SetArea(0,0,239,319);
  196   1        LCD_CD_REG(0x2C);
  197   1        for(i=0;i<320;i++)
  198   1        {
  199   2          for(j=0;j<240;j++)
  200   2          {
  201   3            LcdWirteColorData(color);
  202   3          }
  203   2        }
  204   1      }
  205          
  206          
  207          
  208          
  209          /******************************************************************************
  210                函数说明：LCD写入命令
  211                入口数据：dat 写入的命令
  212                返回值：  无
  213          ******************************************************************************/
  214          void LCD_WR_REG(u8 dat)
  215          {
  216   1        LCD_CD_REG(dat);
  217   1      }
  218          
  219          /******************************************************************************
  220                函数说明：设置起始和结束地址
  221                入口数据：x1,x2 设置列的起始和结束地址
  222                          y1,y2 设置行的起始和结束地址
  223                返回值：  无
  224          ******************************************************************************/
  225          void LCD_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
  226          {
  227   1        LCD_SetArea(x1,y1,x2,y2);
  228   1      }
  229          /******************************************************************************
  230                函数说明：LCD写入数据
  231                入口数据：dat 写入的数据
  232                返回值：  无
  233          ******************************************************************************/
  234          void LCD_WR_DATA8(u8 dat)
  235          {
  236   1        LCD_CD_DATA(dat);
  237   1      }
  238          /******************************************************************************
  239                函数说明：LCD写入数据
  240                入口数据：dat 写入的数据
  241                返回值：  无
  242          ******************************************************************************/
  243          void LCD_WR_DATA(u16 dat)
  244          {
  245   1        LcdWirteColorData(dat);
  246   1      }
  247          /******************************************************************************
  248                函数说明：在指定区域填充颜色
  249                入口数据：xsta,ysta   起始坐标
  250                          xend,yend   终止坐标
  251                          color       要填充的颜色
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 5   

  252                返回值：  无
  253          ******************************************************************************/
  254          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
  255          {          
  256   1        u16 i,j; 
  257   1        LCD_Address_Set(xsta,ysta,xend-1,yend-1);//设置显示范围
  258   1        for(i=ysta;i<yend;i++)
  259   1        {                               
  260   2          for(j=xsta;j<xend;j++)
  261   2          {
  262   3            LCD_WR_DATA(color);
  263   3          }
  264   2        }                   
  265   1      }
  266          
  267          /******************************************************************************
  268                函数说明：在指定位置画点
  269                入口数据：x,y 画点坐标
  270                          color 点的颜色
  271                返回值：  无
  272          ******************************************************************************/
  273          void LCD_DrawPoint(u16 x,u16 y,u16 color)
  274          {
  275   1        LCD_Address_Set(x,y,x,y);//设置光标位置 
  276   1        LCD_WR_DATA(color);
  277   1      } 
  278          
  279          
  280          /******************************************************************************
  281                函数说明：画线
  282                入口数据：x1,y1   起始坐标
  283                          x2,y2   终止坐标
  284                          color   线的颜色
  285                返回值：  无
  286          ******************************************************************************/
  287          void LCD_DrawLine(u16 x1,u16 y1,u16 x2,u16 y2,u16 color)
  288          {
  289   1        u16 t; 
  290   1        int xerr=0,yerr=0,delta_x,delta_y,distance;
  291   1        int incx,incy,uRow,uCol;
  292   1        delta_x=x2-x1; //计算坐标增量 
  293   1        delta_y=y2-y1;
  294   1        uRow=x1;//画线起点坐标
  295   1        uCol=y1;
  296   1        if(delta_x>0)incx=1; //设置单步方向 
  297   1        else if (delta_x==0)incx=0;//垂直线 
  298   1        else {incx=-1;delta_x=-delta_x;}
  299   1        if(delta_y>0)incy=1;
  300   1        else if (delta_y==0)incy=0;//水平线 
  301   1        else {incy=-1;delta_y=-delta_y;}
  302   1        if(delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
  303   1        else distance=delta_y;
  304   1        for(t=0;t<distance+1;t++)
  305   1        {
  306   2          LCD_DrawPoint(uRow,uCol,color);//画点
  307   2          xerr+=delta_x;
  308   2          yerr+=delta_y;
  309   2          if(xerr>distance)
  310   2          {
  311   3            xerr-=distance;
  312   3            uRow+=incx;
  313   3          }
  314   2          if(yerr>distance)
  315   2          {
  316   3            yerr-=distance;
  317   3            uCol+=incy;
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 6   

  318   3          }
  319   2        }
  320   1      }
  321          
  322          
  323          /******************************************************************************
  324                函数说明：画矩形
  325                入口数据：x1,y1   起始坐标
  326                          x2,y2   终止坐标
  327                          color   矩形的颜色
  328                返回值：  无
  329          ******************************************************************************/
  330          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2,u16 color)
  331          {
  332   1        LCD_DrawLine(x1,y1,x2,y1,color);
  333   1        LCD_DrawLine(x1,y1,x1,y2,color);
  334   1        LCD_DrawLine(x1,y2,x2,y2,color);
  335   1        LCD_DrawLine(x2,y1,x2,y2,color);
  336   1      }
  337          
  338          
  339          /******************************************************************************
  340                函数说明：画圆
  341                入口数据：x0,y0   圆心坐标
  342                          r       半径
  343                          color   圆的颜色
  344                返回值：  无
  345          ******************************************************************************/
  346          void Draw_Circle(u16 x0,u16 y0,u8 r,u16 color)
  347          {
  348   1        int a,b;
  349   1        a=0;b=r;    
  350   1        while(a<=b)
  351   1        {
  352   2          LCD_DrawPoint(x0-b,y0-a,color);             //3           
  353   2          LCD_DrawPoint(x0+b,y0-a,color);             //0           
  354   2          LCD_DrawPoint(x0-a,y0+b,color);             //1                
  355   2          LCD_DrawPoint(x0-a,y0-b,color);             //2             
  356   2          LCD_DrawPoint(x0+b,y0+a,color);             //4               
  357   2          LCD_DrawPoint(x0+a,y0-b,color);             //5
  358   2          LCD_DrawPoint(x0+a,y0+b,color);             //6 
  359   2          LCD_DrawPoint(x0-b,y0+a,color);             //7
  360   2          a++;
  361   2          if((a*a+b*b)>(r*r))//判断要画的点是否过远
  362   2          {
  363   3            b--;
  364   3          }
  365   2        }
  366   1      }
  367          
  368          
  369          
  370          
  371          /******************************************************************************
  372                函数说明：显示单个字符
  373                入口数据：x,y显示坐标
  374                          num 要显示的字符
  375                          fc 字的颜色
  376                          bc 字的背景色
  377                          sizey 字号
  378                          mode:  0非叠加模式  1叠加模式
  379                返回值：  无
  380          ******************************************************************************/
  381          void LCD_ShowChar(u16 x,u16 y,u8 num,u16 fc,u16 bc,u8 sizey,u8 mode)
  382          {
  383   1        u8 temp,sizex,t,m=0;
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 7   

  384   1        u16 i,TypefaceNum;//一个字符所占字节大小
  385   1        u16 x0=x;
  386   1        sizex=sizey/2;
  387   1        TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
  388   1        num=num-' ';    //得到偏移后的值
  389   1        LCD_SetArea(x,y,x+sizex-1,y+sizey-1);  //设置光标位置 
  390   1        LCD_CD_REG(0x2C);
  391   1        for(i=0;i<TypefaceNum;i++)
  392   1        { 
  393   2          if(sizey==12)temp=ascii_1206[num][i];          //调用6x12字体
  394   2          else if(sizey==16)temp=ascii_1608[num][i];     //调用8x16字体
  395   2          else if(sizey==24)temp=ascii_2412[num][i];     //调用12x24字体
  396   2          else if(sizey==32)temp=ascii_3216[num][i];     //调用16x32字体
  397   2          else return;
  398   2          for(t=0;t<8;t++)
  399   2          {
  400   3            if(!mode)//非叠加模式
  401   3            {
  402   4              if(temp&(0x01<<t))LCD_WR_DATA(fc);
  403   4              else LCD_WR_DATA(bc);
  404   4              m++;
  405   4              if(m%sizex==0)
  406   4              {
  407   5                m=0;
  408   5                break;
  409   5              }
  410   4            }
  411   3            else//叠加模式
  412   3            {
  413   4              if(temp&(0x01<<t))LCD_DrawPoint(x,y,fc);//画一个点
  414   4              x++;
  415   4              if((x-x0)==sizex)
  416   4              {
  417   5                x=x0;
  418   5                y++;
  419   5                break;
  420   5              }
  421   4            }
  422   3          }
  423   2        }         
  424   1      }
  425          
  426          
  427          /******************************************************************************
  428                函数说明：显示字符串
  429                入口数据：x,y显示坐标
  430                          *p 要显示的字符串
  431                          fc 字的颜色
  432                          bc 字的背景色
  433                          sizey 字号
  434                          mode:  0非叠加模式  1叠加模式
  435                返回值：  无
  436          ******************************************************************************/
  437          void LCD_ShowString(u16 x,u16 y,const u8 *p,u16 fc,u16 bc,u8 sizey,u8 mode)
  438          {         
  439   1        while(*p!='\0')
  440   1        {       
  441   2          LCD_ShowChar(x,y,*p,fc,bc,sizey,mode);
  442   2          x+=sizey/2;
  443   2          p++;
  444   2        }  
  445   1      }
  446          
  447          
  448          /******************************************************************************
  449                函数说明：显示数字
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 8   

  450                入口数据：m底数，n指数
  451                返回值：  无
  452          ******************************************************************************/
  453          u32 mypow(u8 m,u8 n)
  454          {
  455   1        u32 result=1;  
  456   1        while(n--)result*=m;
  457   1        return result;
  458   1      }
  459          
  460          
  461          /******************************************************************************
  462                函数说明：显示整数变量
  463                入口数据：x,y显示坐标
  464                          num 要显示整数变量
  465                          len 要显示的位数
  466                          fc 字的颜色
  467                          bc 字的背景色
  468                          sizey 字号
  469                返回值：  无
  470          ******************************************************************************/
  471          void LCD_ShowIntNum(u16 x,u16 y,u16 num,u8 len,u16 fc,u16 bc,u8 sizey)
  472          {           
  473   1        u8 t,temp;
  474   1        u8 enshow=0;
  475   1        u8 sizex=sizey/2;
  476   1        for(t=0;t<len;t++)
  477   1        {
  478   2          temp=(num/mypow(10,len-t-1))%10;
*** WARNING C188 IN LINE 478 OF lcd.c: 'parameter 2': value truncated
  479   2          if(enshow==0&&t<(len-1))
  480   2          {
  481   3            if(temp==0)
  482   3            {
  483   4              LCD_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
  484   4              continue;
  485   4            }else enshow=1; 
  486   3             
  487   3          }
  488   2          LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
*** WARNING C188 IN LINE 488 OF lcd.c: 'parameter 3': value truncated
  489   2        }
  490   1      } 
  491          
  492          
  493          /******************************************************************************
  494                函数说明：显示两位小数变量
  495                入口数据：x,y显示坐标
  496                          num 要显示小数变量
  497                          len 要显示的位数
  498                          fc 字的颜色
  499                          bc 字的背景色
  500                          sizey 字号
  501                返回值：  无
  502          ******************************************************************************/
  503          void LCD_ShowFloatNum1(u16 x,u16 y,float num,u8 len,u16 fc,u16 bc,u8 sizey)
  504          {           
  505   1        u8 t,temp,sizex;
  506   1        u16 num1;
  507   1        sizex=sizey/2;
  508   1        num1=num*100;
  509   1        for(t=0;t<len;t++)
  510   1        {
  511   2          temp=(num1/mypow(10,len-t-1))%10;
*** WARNING C188 IN LINE 511 OF lcd.c: 'parameter 2': value truncated
  512   2          if(t==(len-2))
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 9   

  513   2          {
  514   3            LCD_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
  515   3            t++;
  516   3            len+=1;
  517   3          }
  518   2          LCD_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
*** WARNING C188 IN LINE 518 OF lcd.c: 'parameter 3': value truncated
  519   2        }
  520   1      }
  521          
  522          
  523          /******************************************************************************
  524                函数说明：显示图片
  525                入口数据：x,y起点坐标
  526                          length 图片长度
  527                          width  图片宽度
  528                          pic[]  图片数组    
  529                返回值：  无
  530          ******************************************************************************/
  531          void LCD_ShowPicture(u16 x,u16 y,u16 length,u16 width,const u8 pic[])
  532          {
  533   1        u16 i,j;
  534   1        u32 k=0;
  535   1        LCD_Address_Set(x,y,x+length-1,y+width-1);
  536   1        LCD_CD_REG(0x2C);
  537   1        for(i=0;i<length;i++)
  538   1        {
  539   2          for(j=0;j<width;j++)
  540   2          {
  541   3            LCD_WR_DATA8(pic[k*2]);
  542   3            LCD_WR_DATA8(pic[k*2+1]);
  543   3            k++;
  544   3          }
  545   2        }     
  546   1      }
  547          
  548          
  549          void Sample_Lamp(void)
  550          {
  551   1        // P33 = !P33;
  552   1        // P35 = !P35;
  553   1        // P37 = !P37;
  554   1        // P42 = !P42;
  555   1        delay_ms(20);
  556   1        LCD_Clear(RED);
  557   1        delay_ms(20);
  558   1        LCD_Clear(GREEN);
  559   1        delay_ms(20);
  560   1        LCD_Clear(RED);
  561   1        delay_ms(20);
  562   1        LCD_Clear(GREEN);
  563   1        LCD_LED = !LCD_LED;
  564   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =     15914     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         2        109
  bit size             =    ------     ------
  ebit size            =    ------     ------
C251 COMPILER V5.60.0,  lcd                                                                28/07/23  08:35:14  PAGE 10  

  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  9 WARNING(S),  0 ERROR(S)
