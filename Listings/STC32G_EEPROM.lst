C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      07/08/23  20:41:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE STC32G_EEPROM
OBJECT MODULE PLACED IN .\Objects\STC32G_EEPROM.obj
COMPILER INVOKED BY: D:\keilc251\C251\BIN\C251.EXE STC32G_EEPROM.c LARGE BROWSE DEBUG PRINT(.\Listings\STC32G_EEPROM.lst
                    -) TABS(2) OBJECT(.\Objects\STC32G_EEPROM.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- STC MCU Limited ------------------------------------------------*/
    3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
    4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
    5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
    6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
    7          /* --- Web: www.STCAI.com ---------------------------------------------*/
    8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
    9          /* --- BBS: www.STCAIMCU.com  -----------------------------------------*/
   10          /* --- QQ:  800003751 -------------------------------------------------*/
   11          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
   12          /*---------------------------------------------------------------------*/
   13          
   14          #include "STC32G_EEPROM.h"
   15          
   16          //========================================================================
   17          // 函数: void ISP_Disable(void)
   18          // 描述: 禁止访问ISP/IAP.
   19          // 参数: non.
   20          // 返回: non.
   21          // 版本: V1.0, 2012-10-22
   22          //========================================================================
   23          void DisableEEPROM(void)
   24          {
   25   1        IAP_CONTR = 0;      //禁止IAP操作
   26   1        IAP_CMD   = 0;      //去除IAP命令
   27   1        IAP_TRIG  = 0;      //防止IAP命令误触发
   28   1        IAP_ADDRE = 0xff;   //将地址设置到非 IAP 区域
   29   1        IAP_ADDRH = 0xff;   //将地址设置到非 IAP 区域
   30   1        IAP_ADDRL = 0xff;
   31   1      }
   32          
   33          //========================================================================
   34          // 函数: void EEPROM_Trig(void)
   35          // 描述: 触发EEPROM操作.
   36          // 参数: none.
   37          // 返回: none.
   38          // 版本: V1.0, 2014-6-30
   39          //========================================================================
   40          void EEPROM_Trig(void)
   41          {
   42   1        F0 = EA;    //保存全局中断
   43   1        EA = 0;     //禁止中断, 避免触发命令无效
   44   1        IAP_TRIG = 0x5A;
   45   1        IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   46   1                                            //送完A5H后，IAP命令立即被触发启动
   47   1                                            //CPU等待IAP完成后，才会继续执行程序。
   48   1        _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   49   1        _nop_();
   50   1        _nop_();
   51   1        _nop_();
   52   1        EA = F0;    //恢复全局中断
   53   1      }
   54          
   55          //========================================================================
   56          // 函数: void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u16 number)
   57          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
   58          // 参数: EE_address:  读出EEPROM的首地址.
C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      07/08/23  20:41:04  PAGE 2   

   59          //       DataAddress: 读出数据放缓冲的首地址.
   60          //       number:      读出的字节长度.
   61          // 返回: non.
   62          // 版本: V1.0, 2012-10-22
   63          //========================================================================
   64          void EEPROM_read_n(u32 EE_address,u8 *DataAddress,u16 number)
   65          {
   66   1        IAP_ENABLE();                           //设置等待时间，允许IAP操作，送一次就够
   67   1        IAP_READ();                             //送字节读命令，命令不需改变时，不需重新送命令
   68   1        do
   69   1        {
   70   2          IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
   71   2          IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
   72   2          IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
   73   2          EEPROM_Trig();                      //触发EEPROM操作
   74   2          *DataAddress = IAP_DATA;            //读出的数据送往
   75   2          EE_address++;
   76   2          DataAddress++;
   77   2        }while(--number);
   78   1      
   79   1        DisableEEPROM();
   80   1      }
   81          
   82          //========================================================================
   83          // 函数: void EEPROM_SectorErase(u32 EE_address)
   84          // 描述: 把指定地址的EEPROM扇区擦除.
   85          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
   86          // 返回: non.
   87          // 版本: V1.0, 2013-5-10
   88          //========================================================================
   89          void EEPROM_SectorErase(u32 EE_address)
   90          {
   91   1        IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
   92   1        IAP_ERASE();                        //宏调用, 送扇区擦除命令，命令不需改变时，不需重新送命令
   93   1                                            //只有扇区擦除，没有字节擦除，512字节/扇区。
   94   1                                            //扇区中任意一个字节地址都是扇区地址。
   95   1        IAP_ADDRE = (u8)(EE_address >> 16); //送扇区地址高字节（地址需要改变时才需重新送地址）
   96   1        IAP_ADDRH = (u8)(EE_address >> 8);  //送扇区地址中字节（地址需要改变时才需重新送地址）
   97   1        IAP_ADDRL = (u8)EE_address;         //送扇区地址低字节（地址需要改变时才需重新送地址）
   98   1        EEPROM_Trig();                      //触发EEPROM操作
   99   1        DisableEEPROM();                    //禁止EEPROM操作
  100   1      }
  101          
  102          //========================================================================
  103          // 函数: void EEPROM_write_n(u32 EE_address,u8 *DataAddress,u16 number)
  104          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  105          // 参数: EE_address:  写入EEPROM的首地址.
  106          //       DataAddress: 写入源数据的缓冲的首地址.
  107          //       number:      写入的字节长度.
  108          // 返回: non.
  109          // 版本: V1.0, 2012-10-22
  110          //========================================================================
  111          void EEPROM_write_n(u32 EE_address,u8 *DataAddress,u16 number)
  112          {
  113   1        IAP_ENABLE();                       //设置等待时间，允许IAP操作，送一次就够
  114   1        IAP_WRITE();                        //宏调用, 送字节写命令
  115   1        do
  116   1        {
  117   2          IAP_ADDRE = (u8)(EE_address >> 16); //送地址高字节（地址需要改变时才需重新送地址）
  118   2          IAP_ADDRH = (u8)(EE_address >> 8);  //送地址中字节（地址需要改变时才需重新送地址）
  119   2          IAP_ADDRL = (u8)EE_address;         //送地址低字节（地址需要改变时才需重新送地址）
  120   2          IAP_DATA  = *DataAddress;         //送数据到IAP_DATA，只有数据改变时才需重新送
  121   2          EEPROM_Trig();                    //触发EEPROM操作
  122   2          EE_address++;                     //下一个地址
  123   2          DataAddress++;                    //下一个数据
  124   2        }while(--number);                   //直到结束
C251 COMPILER V5.60.0,  STC32G_EEPROM                                                      07/08/23  20:41:04  PAGE 3   

  125   1        DisableEEPROM();
  126   1      }
  127          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       253     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------         12
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
